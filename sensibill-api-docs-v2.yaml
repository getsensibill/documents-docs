openapi: 3.0.3
info:
  title: Sensibill API
  description: The Sensibill Platform API
  version: 2.2022.3.30
  contact:
    url: 'https://getsensibill.com'
    email: prodsupport@getsensibill.com
    name: Sensibill
  termsOfService: 'https://getsensibill.com/terms-of-service'

# https://github.com/faker-js/faker
x-json-schema-faker:
  locale: en
  min-items: 1
  max-items: 3
  resolve-json-path: true
  
tags:
  - name: Home
    description: Home
  - name: Authentication
    description: Authentication
  - name: Documents
    description: Documents
  - name: Exports
    description: Exports
  - name: Lookups
    description: Lookups
  - name: Merchants
    description: Merchants
  - name: Users
    description: Users
  - name: Folders
    description: Folders
servers:
  - url: https://receipts-sandbox.sensibill.io/api/v2
    description: 'Public Server'
  - url: https://beta.getsensibill.com/api/v2
    description: 'Internal/Beta Server'

paths:
  /:
    get:
      operationId: getApiInfo
      tags:
        - Home
      security: []
      summary: API Home Endpoint
      description: 'The API Home Endpoint returns general information about the Sensibill API. It should be the first point of contact for any system integrating with Sensibill, as it will provide clients with up-to-date URLs for other endpoints, as well as status information on the general Sensibill architecture.'
      responses:
        '200':
          description: Success. This is the only valid status code from the home endpoint. Anything else indicates internal server problems.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfoDto'
  /jwtAuthenticate:
    post:
      operationId: authenticateWithJwt
      tags:
        - Authentication
      summary: Authentication using JWT
      description: 'Allows clients to authenticate and acquire an access token using a JSON Web Token. <br/><br/>If successful, the response includes a user or client access token which can be used as a session token for other authenticated endpoints in the Sensibill API. <br/><br/>There are two types of access tokens - user tokens and client tokens. Passing in your clientID in the ''sub'' claim (or individual ID claim field) of your JWT will return a client access token. Passing a user''s access ID in your ID Claim field will return a user access token instead. <br/><br/>Your client account must be configured to allow JWT (please reach out to the Sensibill Support Team). The API supports JWS and JWE as JWT implementations. <br/><br/>JWS currently supports RSA and ECDSA signing algorithms (RS256, RS384, RS512, ES256, ES384, ES512). Public keys for signature verification should be made available through a publicly accessible URL. JWS header must have ''alg'' and ''kid'' parameters and the payload must have at least ''sub'' and ''iat'' claims. The ''sub'' claim is used to identify either a user or a client. If there is a desire to use another claim for those purposes then it can be configured during the client account setup. JWS implementation also supports ''exp'', ''aud'', ''iss'' and ''scp'' claims. If there is a need to validate those claims they should be configured as part of the client account setup. <br/><br/>JWE currently supports RSAES OAEP using default parameters (''alg'': RSA-OAEP) for encrypting the Content Encryption Key (CEK) and AES GCM using 256-bit key (''enc'': A256GCM) for encrypting the content. Please reach out to the Sensibill Support Team to receive Sensibill’s public key to be used for JWT encryption. JWE’s content is expected to be a JWS conforming to the JWS requirements mentioned earlier. <br/><br/>The response also returns a token_id. This can not be used for authenticating regular requests, but is required for using our query parameter based signature method.'
      requestBody:
        $ref: '#/components/requestBodies/JwtAuthenticateRequest'
      responses:
        '200':
          description: Success. Use the token in the body for other authenticated calls as this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticateResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /invalidate:
    post:
      operationId: invalidateAccessToken
      tags:
        - Authentication
      summary: Invalidate access token
      description: 'This endpoint can be used to permanently invalidate an access token. Simply POST to this endpoint using a normal authenticated request, and whatever access token was used in the request will be invalid for any further requests.'
      responses:
        '200':
          description: Success. The token was successfully invalidated.
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /logout:
    get:
      operationId: logout
      tags:
        - Authentication
      summary: Logout user
      description: 'Performs a user logout, clearing the session and invalidating the access token. Works similarly to /invalidate, but simply as a GET call.'
      responses:
        '200':
          description: Success. The user was logged out. This is the only valid status code from the logout endpoint. Anything else indicates internal server problems.
  /clientInfo:
    get:
      operationId: getClientInfo
      tags:
        - Authentication
      summary: Client information
      description: 'Allows a client to retrieve information about itself. You can use this endpoint with the client''s OAuth key and secret using Basic authentication, with a client access token, or with a user access token. When using a client access token, the response also includes the expiration time for the token used.'
      responses:
        '200':
          description: Success. The information for the client was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfoResponseDto'
        '401':
          description: Unauthorized. This will occur if the credentials provided are invalid.
        '403':
          description: Access Error. This will occur if the credentials provided are valid but not associated with a suitable client.
  /authorizationGrant:
    get:
      operationId: getAuthorizationGrant
      tags:
        - Authentication
      summary: Request an authorization grant
      description: 'Allows clients to request an authorization grant to begin the OAuth2 flow. As an OAuth2 endpoint, all of the parameters and result variables from this endpoint have names that use underscores, versus the rest of the API which is camel-cased. <br/><br/>Clients must provide a username and password in the Authorization header of the request (or equivalent accessID, accessSecret and credentialType for SSO clients). This can be accomplished by setting a ''basic'' authentication header using the user''s username and password in compliance with Section 2 of RFC 2617 like shown below: <br/><br/>`Authorization: ''Basic base64(username:password)''` <br/><br/><strong>Types of secrets</strong> <br/><br/>Sensibill supports 2 modes of operation for client secrets: <br/><br/>In the case where a client can guarantee a secret that is closely guarded, it allows for user administration support (e.g, deactivate, reactivate users, etc) <br/>In the case where the secret may not be so secret ie. embedded in an application, the administrative actions are not allowed. <br/><br/>For an example, please refer to <a href=''./apiref/demo.html#step_five''>''Authentication Step Five'' of the jQuery Demo</a>.'
      parameters:
        - $ref: '#/components/parameters/ClientIDParameter'
        - $ref: '#/components/parameters/ResponseTypeParameter'
        - $ref: '#/components/parameters/RedirectURIParameter'
        - $ref: '#/components/parameters/CredentialTypeParameter'
        - $ref: '#/components/parameters/RedirectParameter'
      responses:
        '200':
          description: Success. The authorization grant was created successfully. Use the code in the body with the Access Token endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you try to log in using a credentialType which your client is not authorized for.'
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /accessToken:
    post:
      operationId: createAccessToken
      tags:
        - Authentication
      summary: Obtain an Access Token
      description: 'Allows a client to use its credentials to obtain an access token, to swap an authorization grant for an access token, or to swap a refresh token for a new access token. There are two types of access tokens - user tokens and client tokens. <br/><br/>A client token authenticates a specific client, e.g. your architecture and servers. client tokens can be used to access any resources owned by the client, such as general information on users your client has created. Client tokens are also required to register new users or make requests on their behalf such as the user posting a receipt. <br/><br/>A user token authenticates a specific user to our system, e.g. Jane Doe of Winnipeg, Manitoba. A user token will be required if you want to access specific data about a user, such as the details of that user''s documents. <br/><br/>Token expiry information is in the `expires_in` and `refresh_expires_in` fields. <br/><br/>You can also retrieve the expiration times for user and client access tokens using the user GET endpoint, `/users/:userID`, and the clientInfo GET endpoint, `/clientInfo`, respectively. <br/><br/>No matter which kind of access token is being requested, the client MUST include their Client Key and Client Secret as the username and password, respectively, in the HTTP Authorization header, on top of providing required parameters below. <br/><br/>This can be accomplished by setting a ''basic'' authentication header using the Client Key and Client Secret as username and password like shown below: <br/><br/>`Authorization: ''Basic base64(ClientKey:ClientSecret)''` <br/><br/>The access token is currently always a bearer token, which should be sent in the ''Authorization'' header in the format ''Bearer accessToken''. <br/><br/>In the future, other token types may also be used, so please check the `token_type` provided in the response. <br/><br/>For an example, please refer to <a href=''./apiref/demo.html#step_six''>''Authentication Step Six'' of the jQuery Demo</a>. <br/><br/>The response also returns a `token_id`. This can not be used for authenticating regular requests, but is required for using our query parameter based signature method.'
      parameters:
        - $ref: '#/components/parameters/GrantTypeParameter'
        - $ref: '#/components/parameters/TokenRedirectURIParameter'
        - $ref: '#/components/parameters/CodeParameter'
        - $ref: '#/components/parameters/RefreshTokenParameter'
      requestBody:
        $ref: '#/components/requestBodies/AccessTokenRequest'
      responses:
        '200':
          description: Success. The access token was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you put in the wrong Redirect URI, for example, if you put one that doesn''t match what you provided when you made the authorization grant request.'
        '401':
          description: Unauthorized. This will occur if the client key/secret you have provided is invalid.
  /documents:
    get:
      tags:
        - Documents
      summary: Returns a paginated list of documents from a user.
      description: This will retrieve a paginated list of documents for the current user.
      operationId: getDocuments
      parameters:
        - name: limit
          in: query
          description: |
            Specify the number of documents to return. \
            If no value is passed it will use the default to limit the number of items in the list
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: |
            Page number for the documents to be returned. The page count uses the limit value to define which documents will be returned. \
            It is zero based index, so first page is 0. \
            Example for starting at the third page in a list of results: `?offset=2`
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 100
            default: 0
        - name: sortBy
          in: query
          description: |
            Document attribute to sort the response data. The default sort order is descending, but this can be specified using the `orderBy` filter. \
            Current acceptable values are: `arrivalDateTime`, `documentDate`, or `documentTime`
          required: false
          schema:
            $ref: '#/components/schemas/DocumentSortByEnum'
        - name: orderBy
          in: query
          description: |
            If sorting the returned documents with the `sortBy` filter, this orderBy filter allows you to specify a sort order. \
            This will be handy if you want to sort in ascending order since the default sort order is descending. \
            Current acceptable values (case insensitive) are: `ASC`, `DESC`
          required: false
          schema:
            $ref: '#/components/schemas/DocumentOrderByEnum'
        - name: filter.accountMetadata.account
          in: query
          description: |
            Array of `accountMetadata.account` to filter the documents. Should ideally satisfy the `/^[a-zA-Z0-9-_:.]+$/` pattern \
            **Example:** `filter.accountMetadata.account='ACC102030'&filter.accountMetadata.account='405060'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.accountMetadata.account.exists
          in: query
          description: |
            This is used to match and include documents where a value *exists* for the `accountMetadata.account` property. \
            Only `true` or `false` boolean values are accepted. A mix of operators with basic values is not supported. 
            If `accountMetadata.account.exists` is provided together with plain values for account, this `exists` operator is ignored. \
            **Example:** To filter all documents with `accountMetadata.account` not set, use `filter.accountMetadata.account.exists=false`
          required: false
          schema:
            type: boolean
        - name: filter.accountMetadata.transactionId
          in: query
          description: |
            Array of `accountMetadata.transactionId` to filter the documents. Should ideally satisfy the `/^[a-zA-Z0-9-_:.]+$/` pattern. \
            **Example:** `filter.accountMetadata.transactionId='TX00001'&filter.accountMetadata.transactionId='TX00002'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.accountMetadata.transactionId.exists
          in: query
          description: |
            This is used to match and include documents where a value *exists* for the `accountMetadata.transactionId` property. \
            Only `true` or `false` boolean values are accepted. A mix of operators with basic values is not supported. 
            If `accountMetadata.transactionId.exists` is provided together with plain values for transactionId, this `exists` operator is ignored. \
            **Example:** To filter all documents with `accountMetadata.transactionId` not set, use `filter.accountMetadata.transactionId.exists=false`
          required: false
          schema:
            type: boolean
        - name: filter.amountDue
          in: query
          description: |
            Array of `amountDue` values to filter the documents. `afterTax` is the document property considered for the match. \
            **Example:** `filter.amountDue=1000.55&filter.amountDue=1010.90`
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
            maxItems: 20
        - name: filter.amountDue.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `amountDue` value to filter the documents. `afterTax` is the document property considered for the match. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:** \
            * with single operator: `filter.amountDue.gte=1000.55`
            * with other operators (behave like AND): `filter.amountDue.gte=1000.55&filter.amountDue.lte=1010.90`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.amountDue.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `amountDue` value to filter the documents. `afterTax` is the document property considered for the match. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:** \
            * with single operator: `filter.amountDue.lte=1000.55`
            * with other operators (behave like AND): `filter.amountDue.gte=1000.55&filter.amountDue.lte=1010.90`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.arrivalDateTime.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `arrivalDateTime` to filter the documents.
            All filter conditions will compose a logical `AND` chain in the query. The `arrivalDateTime` filter does not match exact values and is considered to be UTC. \
            Date-time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`. Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable. \
            **Examples:** \
            * with just date: `filter.arrivalDateTime.gte='2012-12-28'`
            * with date and time: `filter.arrivalDateTime.gte='2012-12-28T21:27'`
            * with date and time: `filter.arrivalDateTime.gte='2012-12-28 21:27:55.827'`
            * with other operators (behave like AND): `filter.arrivalDateTime.gte='2012-12-28T21:27'&filter.arrivalDateTime.lte='2012-12-28T21:27:59'`
          required: false
          schema:
            type: string
            format: date-time
        - name: filter.arrivalDateTime.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the arrivalDateTime to filter the documents.
            All filter conditions will compose a logical `AND` chain in the query. The `arrivalDateTime` field does not match exact values and is considered to be UTC. \
            Date-time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`. Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable. \
            **Examples:** \
            * with just date: `filter.arrivalDateTime.lte='2012-12-28'`
            * with date and time: `filter.arrivalDateTime.lte='2012-12-28T21:27'`
            * with date and time: `filter.arrivalDateTime.lte='2012-12-28 21:27:55.827'`
            * with other operators (behave like AND): `filter.arrivalDateTime.gte='2012-12-28T21:27'&filter.arrivalDateTime.lte='2012-12-28T21:27:59'`
          required: false
          schema:
            type: string
            format: date-time
        - name: filter.categoryCode
          in: query
          description: |
            Array of `categoryCode` values to filter the documents. \
            **Example:** `filter.categoryCode='shopping'&filter.categoryCode='business'`
          required: false
          schema:
            type: array
            maxItems: 20
            items:
              type: string
              pattern: ^[a-zA-Z0-9-_ ]+$
              minLength: 3
              maxLength: 25
        - name: filter.currencyCode
          in: query
          description: |
            Array of `currencyCode` values to filter the documents. \
            **Example:** `filter.currencyCode='CAD'&filter.currencyCode='USD'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyCodeDto'
            maxItems: 20
        - name: filter.description
          in: query
          description: |
            Array of `description` values to filter the documents. The filter is case insentive and matches any document where the
            description contains the given value. Values should ideally satisfy the /^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$/ pattern which prohibits the `;` punctuation \
            **Example:** `filter.description='Dinner with friends'&filter.description='Children winter gear'
          required: false
          schema:
            type: array
            items:
              type: string
              maxLength: 75
              pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
            maxItems: 20
        - name: filter.documentDate
          in: query
          description: |
            Array of `documentDate` values to filter the documents. \
            **Example:** `filter.documentDate='2021-04-04'&filter.documentDate='2021-12-08'`
          required: false
          schema:
            type: array
            items:
              type: string
              format: date
            maxItems: 20
        - name: filter.documentDate.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `documentDate` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:** \
            * with single operator: `filter.documentDate.gte='2012-12-28'`
            * with other operators (behave like AND): `filter.documentDate.gte='2012-12-28'&filter.documentDate.lte='2023-12-28'`
          required: false
          schema:
            type: string
            format: date
        - name: filter.documentDate.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `documentDate` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:** \
            * with single operator: `filter.documentDate.lte='2012-12-28'`
            * with other operators (behave like AND): `filter.documentDate.gte='2012-12-28'&filter.documentDate.lte='2023-12-28'`
          required: false
          schema:
            type: string
            format: date
        - name: filter.documentNumber
          in: query
          description: |
            Array of `documentNumber` values to filter the documents. \
            **Example:** `filter.documentNumber='112233'&filter.documentNumber='445566'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.documentTime
          in: query
          description: |
            Array of `documentTime` values to filter the documents. \
            **Example:** `filter.documentTime='21:12'&filter.documentTime='22:13'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DocumentTimeDto'
            maxItems: 20
        - name: filter.documentTime.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `documentTime` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Example:** \
            * with single operator: `filter.documentTime.gte='10:00'`
            * with other operators (behave like AND): `filter.documentTime.gte='10:00'&filter.documentTime.lte='14:00'`
          required: false
          schema:
            $ref: '#/components/schemas/DocumentTimeDto'
        - name: filter.documentTime.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `documentTime` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Example:** \
            * with single operator: `filter.documentTime.lte='10:00'`
            * with other operators (behave like AND): `filter.documentTime.gte='10:00'&filter.documentTime.lte='14:00'`
          required: false
          schema:
            $ref: '#/components/schemas/DocumentTimeDto'
        - name: filter.documentType
          in: query
          description: |
            Array of `documentType` to filter the documents. Currently supported values are [invoice, receipt]. \
            **Example:** `filter.documentType='invoice'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DocumentTypeEnum'
            maxItems: 2
        - name: filter.expenseType
          in: query
          description: |
            Array of `expenseType` to filter the documents. Currently supported values are [business, personal]. \
            **Example:** `filter.expenseType='business'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExpenseTypeEnum'
        - name: filter.folder
          in: query
          description: |
            Will only return documents that are in one or more of the folder IDs specified. The folder IDs should match those set on the user that the document belongs to.
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.foreignId
          in: query
          description: |
            Array of `foreignId` to filter the documents. Example: `filter.foreignId='20210930_001'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.fulltext
          in: query
          required: false
          description: 'Will perform a case insensitive full text search on the following properties of a document: merchant name, total amount (after tax), item descriptions, document description. Total amount can match both the integer part or the amount with two decimals with the `.` as separator.'
          schema:
            type: string
        - name: filter.id
          in: query
          description: |
            Array of ids to filter the documents. Example: `filter.id='mE0wyhAwJoPMUWlzrbVY'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenericIdString'
            maxItems: 20
        - name: filter.lastUpdateDateTime.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `lastUpdateDateTime` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. The `lastUpdateDateTime` filter does not match exact values and is considered to be UTC. \
            Date time formats allowed are: 'YYYY-MM-DDTHH:mm:ss.SSS' or 'YYYY-MM-DD HH:mm:ss.SSS'. Time fields can be suppressed from the end to the beginning i.e. 'YYYY-MM-DD HH:mm' is acceptable. \
            **Examples:** \
            * with just date: `filter.lastUpdateDateTime.gte='2012-12-28'`
            * with date and time: `filter.lastUpdateDateTime.gte='2012-12-28T21:27'`
            * with date and time: `filter.lastUpdateDateTime.gte='2012-12-28 21:27:55.827'`
            * with other operators (behave like AND): `filter.lastUpdateDateTime.gte='2012-12-28T21:27'&filter.lastUpdateDateTime.lte='2012-12-28T21:27:59'`
          required: false
          schema:
            type: string
            format: date-time
        - name: filter.lastUpdateDateTime.lte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `lastUpdateDateTime` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. The `lastUpdateDateTime` filter does not match exact values and is considered to be UTC. \
            Date time formats allowed are: 'YYYY-MM-DDTHH:mm:ss.SSS' or 'YYYY-MM-DD HH:mm:ss.SSS'. Time fields can be suppressed from the end to the beginning i.e. 'YYYY-MM-DD HH:mm' is acceptable. \
            **Examples:** \
            * with just date: `filter.lastUpdateDateTime.lte='2012-12-28'`
            * with date and time: `filter.lastUpdateDateTime.lte='2012-12-28T21:27'`
            * with date and time: `filter.lastUpdateDateTime.lte='2012-12-28 21:27:55.827'`
            * with other operators (behave like AND): `filter.lastUpdateDateTime.gte='2012-12-28T21:27'&filter.lastUpdateDateTime.lte='2012-12-28T21:27:59'`
          required: false
          schema:
            type: string
            format: date-time
        - name: filter.merchantName
          in: query
          description: |
            Array of `merchantName` values to filter the documents. Example: `filter.merchantName='Home Sense'&filter.merchantName='IKAE'`
          required: false
          schema:
            type: array
            items:
              type: string
              maxLength: 30
              pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]$
            maxItems: 20
        - name: filter.merchantTaxIdNumber
          in: query
          description: |
            Array of `merchantTaxIdNumber` values to filter the documents. \
            **Example:** `filter.merchantTaxIdNumber='1111 RT0001'&filter.merchantTaxIdNumber='2222 RT0002'`
          required: false
          schema:
            type: array
            items:
              type: string
              maxLength: 25
              pattern: ^[a-zA-Z0-9-_:. ]+$
            maxItems: 20
        - name: filter.notes
          in: query
          description: |
            Array of `notes` values to filter the documents. The filter is case insentive and matches any document where the
            notes contains the given value. \
            **Example:** `filter.notes='Recurrent expense'&filter.description='Wedding cake insurance'
          required: false
          schema:
            type: array
            items:
              type: string
              maxLength: 75
              pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]$
        - name: filter.paymentTender
          in: query
          description: |
            Array of `paymentTender` values to filter the documents. \
            **Example:** `filter.paymentTender='Amex'&filter.paymentTender='Cash'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TenderTypesEnum'
            maxItems: 20
        - name: filter.returnPeriodDuration
          in: query
          description: |
            Array of `userMetadata.returnPeriod.duration` values to filter the documents. \
            When an array of filter.returnPeriodDuration is provided, they will compose a logial `OR` chain in the query. A mix of operators with basic values is not supported. \
            **Example:** (behave like OR): `filter.returnPeriodDuration=1&filter.returnPeriodDuration=10`
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
            maxItems: 20
        - name: filter.returnPeriodDuration.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `userMetadata.returnPeriod.duration` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.returnPeriodDuration.gte=1`
            * with other operators (behave like AND): `filter.returnPeriodDuration.gte=1&filter.returnPeriodDuration.lte=10`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.returnPeriodDuration.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `userMetadata.returnPeriod.duration` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.returnPeriodDuration.lte=10`
            * with other operators (behave like AND): `filter.returnPeriodDuration.gte=1&filter.returnPeriodDuration.lte=10`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.returnPeriodUnit
          in: query
          description: |
            Array of `userMetadata.returnPeriod.unit` values to filter the documents. Example: `filter.returnPeriodUnit='day'&filter.returnPeriodUnit='week'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PeriodUnitEnum'
            maxItems: 20
        - name: filter.total
          in: query
          description: |
            Array of `total` values to filter the documents. `afterTax` is the document property considered for the match. \
            When an array of filter.total is provided, they will compose a logial `OR` chain in the query. A mix of operators with basic values is not supported. \
            **Example:** (behave like OR): `filter.total=1000.55&filter.total=1010.90`
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
            maxItems: 20
        - name: filter.total.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `total` to filter the documents. `afterTax` is the document property considered for the match. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.total.gte=1000.55`
            * with other operators (behave like AND): `filter.total.gte=1000.55&filter.total.lte=1010.90`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.total.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `total` to filter the documents. `afterTax` is the document property considered for the match. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.total.lte=1000.55`
            * with other operators (behave like AND): `filter.total.gte=1000.55&filter.total.lte=1010.90`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.status
          in: query
          description: |
            Array of `status` values to filter the documents. Example: `filter.status='CompletedFailed'&filter.status='CompletedSuccess'`
          required: false
          schema:
            $ref: '#/components/schemas/DocumentStatusTypesArray'
        - name: filter.sourceFormat
          in: query
          required: false
          description: |
            Array of `sourceFormat` values to filter the documents. Example: `filter.sourceFormat='image'&filter.sourceFormat='pdf'`
          schema:
            $ref: '#/components/schemas/DocumentSourceFormatsArray'
        - name: filter.warrantyPeriodDuration
          in: query
          description: |
            Array of `userMetadata.warrantyPeriod.duration` values to filter the documents. \
            When an array of filter.warrantyPeriodDuration is provided, they will compose a logial `OR` chain in the query. A mix of operators with basic values is not supported. \
            **Example:** (behave like OR): `filter.warrantyPeriodDuration=1&filter.warrantyPeriodDuration=10`
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
            maxItems: 20
        - name: filter.warrantyPeriodDuration.gte
          in: query
          description: |
            This is a *greater than or equal to* filter on the `userMetadata.warrantyPeriod.duration` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.warrantyPeriodDuration.gte=1`
            * with other operators (behave like AND): `filter.warrantyPeriodDuration.gte=1&filter.warrantyPeriodDuration.lte=10`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.warrantyPeriodDuration.lte
          in: query
          description: |
            This is a *lesser than or equal to* filter on the `userMetadata.warrantyPeriod.duration` to filter the documents. \
            All filter conditions will compose a logical `AND` chain in the query. A mix of operators with basic values is not supported. \
            **Examples:**
            * with single operator: `filter.warrantyPeriodDuration.lte=10`
            * with other operators (behave like AND): `filter.warrantyPeriodDuration.gte=1&filter.warrantyPeriodDuration.lte=10`
          required: false
          schema:
            type: number
            minimum: 0
        - name: filter.warrantyPeriodUnit
          in: query
          description: |
            Array of `userMetadata.warrantyPeriod.unit` values to filter the documents. Example: `filter.warrantyPeriodUnit='day'&filter.warrantyPeriodUnit='week'`
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PeriodUnitEnum'
            maxItems: 20
      responses:
        '200':
          description: Success. The list of documents was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentListResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, send an invalid parameter or if you provide an invalid value for a parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Documents
      operationId: postDocument
      summary: Create a new document
      description: |
            This allows clients to submit new documents to be processed by the system.
            Only clients with the feature flag enableInvoice enabled are allowed to submit documentType = 'invoice'.
            Contact Sensibill support for more information about the enableInvoice feature flag.
      requestBody:
        $ref: '#/components/requestBodies/DocumentCreateRequest'
      responses:
        '200':
          description: Success. The new document was successfully submitted and its ID returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCreationResponseDto'
        '400':
          description: Bad Request. This will occur if you provide an invalid value for a request parameter, an invalid parameter or invalid body.
        '401':
          description: Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Documents
      operationId: deleteDocuments
      summary: Delete documents
      description: |
        This endpoint will allow you to batch delete documents.
        To delete one or more documents pass their ids as an array in the request body
        **Important**: If any of the documents fail to delete the whole request will fail
      requestBody:
        $ref: '#/components/requestBodies/DocumentDeleteRequest'
      responses:
        '200':
          description: Success. The documents were deleted from the system and the array of deleted document ids are passed back.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeleteResponseDto'
        '400':
          description: 'Bad Request. This will occur if you provide an invalid value for a request parameter, an invalid parameter or invalid body. This can also happen if there is a problem deleting one or more of the documents in the request The response will have the document id that caused the problem and the error message'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '500':
          description: Internal Server Error.
  '/documents/{id}':
    get:
      tags:
        - Documents
      summary: Get a document
      description: This endpoint will retrieve the details of a single document with the given ID.
      operationId: getDocumentById
      parameters:
        - $ref: '#/components/parameters/DocumentIdParameter'
      responses:
        '200':
          description: Success. The document was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentResponseDto'
        '400':
          description: Bad Request. This will occur if you provide an invalid value for a request parameter.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '404':
          description: Not Found. The document ID you have provided is not one of this user's documents.
        '500':
          description: Internal Server Error.
    patch:
      tags:
        - Documents
      summary: Update a document
      operationId: editDocument
      description: |
        This endpoint allows you to update a specific subset of data for a single document given its ID. \
        The schema defined below outlines the fields which can be updated. 
        To unset a specific field you can pass empty string or null. Numeric or Enum fileds must be null to unset.
      parameters:
        - $ref: '#/components/parameters/DocumentIdParameter'
      requestBody:
        description: An object composed of all the fields you want to edit for the given document.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditDocumentRequestDto'
      responses:
        '200':
          description: Successful response - returns the Id of the updated document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditDocumentResponseDto'
        '400':
          description: Bad Request. This will occur if you provide an invalid value for a request parameter.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '404':
          description: Not Found. The document ID you have provided is not one of this user's documents.
        '500':
          description: Internal Server Error.
  '/documents/{id}/image':
    get:
      operationId: documentImage
      tags:
        - Documents
      summary: Get an image version of the document.
      description: 'This endpoint allows you to get an image (jpeg) for any type of document(image, pdf, html_email, etc..).  <br/>This will be the url that was returned in the imagePreview field in the GET documents details data format endpoint. <br/><br/><strong>Important</strong>: This may take up to 20 seconds to return for pdf or email documents when calling for the first time'
      parameters:
        - name: id
          in: path
          description: A unique ID that identifies this document in the Sensibill system.
          required: true
          schema:
            $ref: '#/components/schemas/GenericIdString'
      responses:
        '200':
          description: Success. Successfully returned the jpeg image of the document.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's documents.
  '/documents/{id}/pdf':
    get:
      operationId: documentPdf
      tags:
        - Documents
      summary: Get the orginal pdf of a pdf/pdf_email source format document.
      description: 'This endpoint allows you to get the original pdf for any pdf source format document (pdf or pdf_email).  <br/>This will be the url that was returned in the url field in the GET document details data format endpoint for pdf documents. <br/><br/><strong>Important</strong>: This endpoint can only be called for pdf or pdf_email source format documents and will not work with other document source format types'
      parameters:
        - name: id
          in: path
          description: A unique ID that identifies this document in the Sensibill system.
          required: true
          schema:
            $ref: '#/components/schemas/GenericIdString'
      responses:
        '200':
          description: Success. Successfully returned the original document pdf.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's documents.
  /documents/status:
    get:
      tags:
        - Documents
      summary: Query documents for processing status updates
      description: Query a list of documents (using their id) for their processing status
      operationId: getDocumentsStatus
      parameters:
        - name: id
          in: query
          description: |
            The unique identifier for the document in the Sensibill system. \
            You can query up to ten Ids at once by appending each pair with the `&` character
          required: true
          schema:
            type: array
            minItems: 1
            maxItems: 10
            items:
              $ref: '#/components/schemas/GenericIdString'
        - name: timeout
          in: query
          description: |
            The most amount of time (in seconds) that the client wants to wait for a response from the server. \
            A response is immediately returned if **timeout is omitted**, but its value cannot be more than 25 seconds (max timeout) if provided.
          required: false
          schema:
            type: integer
            maximum: 25
            minimum: 1
            example: 20
      responses:
        '200':
          description: Success. The list of document statuses was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsStatusResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, send an invalid parameter or if you provide an invalid value for a parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you try to use this endpoint without being setup for documents.
        '500':
          description: Internal Server Error.
  /exports:
    post:
      operationId: createExport
      tags:
        - Exports
      summary: Export documents
      description: |
        This API call allows you to export a set of documents for a user. To call this endpoint, you must use a user-token. You can not call this endpoint without it. \
        Users can have as many exports as they need. Exports are kept in Sensibill's system for the period of 14 days.
      requestBody:
        $ref: '#/components/requestBodies/ExportCreateRequest'
      responses:
        '200':
          description: Success. The export request was received sucessfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCreateResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, if you provide an invalid value for a required parameter, or if you exceed the limit of 500 documents in an export.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
    get:
      operationId: getExports
      tags:
        - Exports
      summary: Get exports
      description: |
        This endpoint provides the ability to retrieve the list of exports for a user. A user-token is required to access this endpoint.
      responses:
        '200':
          description: Success. The list of exports is successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportsStatusDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/exports/{id}':
    get:
      operationId: getExportById
      tags:
        - Exports
      summary: Get export status
      description: |
        This endpoint provides the ability to periodically poll for the export status.
        The id is the export id received during the first step (asynchronous POST). \
        The response contains status information on the export.
      parameters:
        - $ref: '#/components/parameters/ExportIdParameter'
      responses:
        '200':
          description: Success. The status of the export is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportsResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The export ID you have provided is not one of this user's exports.
  /lookups/documentcategories:
    get:
      operationId: getDocumentCategories
      tags:
        - Lookups
      summary: Document categories
      description: This API call allows for retrieval of a list of document categories. To call this endpoint, you can use either a client-token or a user-token.
      parameters:
        - $ref: '#/components/parameters/ScaleParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLookupCategoryListResponseDto'
        '401':
          description: Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.
  /lookups/currencies:
    get:
      operationId: getCurrencies
      tags:
        - Lookups
      summary: Supported Currencies
      description: This API call allows you to retrieve the list of currencies that we currently support in our system. To call this endpoint, you can use either a client-token or a user-token.
      parameters:
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLookupCurrencyListResponseDto'
        '401':
          description: Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.
  /lookups/locales:
    get:
      operationId: getLocales
      tags:
        - Lookups
      summary: Supported Locales
      description: This API call allows you to retrieve the list of locales that we currently support in our system. To call this endpoint, you can use either a client-token or a user-token.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLookupLocaleListResponseDto'
        '401':
          description: Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.
  /merchants:
    get:
      operationId: getMerchants
      tags:
        - Merchants
      summary: Merchants list
      description: 'This endpoint allows you to retrieve a list of merchants with a name, optional merchantID, and optional receipt category that corresponds to the merchant category. Limited to 20 and in ascending alphabetical order. This endpoint requires authentication. Both a user token or a client token are accepted. Requests using a user token will match against merchants available for all users and also against merchant names the user has used on their documents. Those merchants will only have a name, and no merchantID or category.'
      parameters:
        - $ref: '#/components/parameters/MerchantsNameParameter'
      responses:
        '200':
          description: Success. The list of merchants was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantsDto'
        '500':
          description: Internal server error.
  /users:
    post:
      operationId: createUser
      tags:
        - Users
      summary: Register a user
      description: 'This API call allows you to register a new user. To call this endpoint, you must use a client-token. You can not call this endpoint without it.'
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '200':
          description: Success. The new user was successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /jwtRegister:
    post:
      operationId: registerWithJwt
      tags:
        - Users
      summary: Register a user using JWT
      description: 'This API call allows you to register a new user using a JSON Web Token. <br/><br/>Your client account must be configured to allow JWT (please reach out to the Sensibill Support Team). The API supports JWS and JWE as JWT implementations. <br/><br/>JWS currently supports RSA and ECDSA signing algorithms (RS256, RS384, RS512, ES256, ES384, ES512). Public keys for signature verification should be made available through a publicly accessible URL. JWS header must have ''''alg'''' and ''''kid'''' parameters and the payload must have at least ''''sub'''' and ''''iat'''' claims. The ''''sub'''' claim will be used as a user access ID for the user being created. If there is a desire to use another claim for those purposes then it can be configured during the client account setup. JWS implementation also supports ''''exp'''', ''''aud'''', ''''iss'''' and ''''scp'''' claims. If there is a need to validate those claims they should be configured as part of the client account setup. <br/><br/>JWE currently supports RSAES OAEP using default parameters (''''alg'''': RSA-OAEP) for encrypting the Content Encryption Key (CEK) and AES GCM using 256-bit key (''''enc'''': ''''A256GCM'''') for encrypting the content. Please reach out to the Sensibill Support Team to receive Sensibill’s public key to be used for JWT encryption. JWE’s content is expected to be a JWS conforming to the JWS requirements mentioned earlier.'
      requestBody:
        $ref: '#/components/requestBodies/JwtUserRequest'
      responses:
        '200':
          description: Success. The new user was successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, if you provide an invalid value for a required parameter, or if the JSON Web Token is either incomplete or cannot be verified. This status code will also occur if you try to register the same user more than once. In that case, an InvalidParametersError response will be returned containing the error ''Access ID is already registered.'''
  '/users/{userID}':
    get:
      operationId: getUserById
      tags:
        - Users
      summary: Retrieve account information
      description: 'This allows you to retrieve the account information for a user. The userID can be either the Sensibill specific userID or can be "me", which will return the user object for the user who is authenticated with the access token. <br/><br/>Accounts on the system can be in one of two states - registered or unregistered. For most normal purposes, you will deal only with registered accounts, such as those you create using the registration endpoint. However, it is possible for an account to be on our system, but unregistered. This can happen if we receive a document from a POS system for a user that is not yet on our system. <br/><br/>This endpoint accepts both user tokens and client tokens. <br/><br/>When using a user token, you are only allowed to retrieve the account information for the user associated with the access token you supply. <br/><br/>You can only use a client token with this endpoint if that has been explicitly enabled on your account. Please contact the Sensibill team in order to have this policy enabled on your account - it is disabled by default. When you request User information using a client token, only a limited number of fields will be returned.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/ExcludeAlertsParameter'
      responses:
        '200':
          description: Success. The information for the user account was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to retrieve the information for the user you have requested. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Delete user account
      description: 'This allows you to delete a user account. The userID can be either the Sensibill specific userID or "me", which will delete the user object for the user who is authenticated with the access token.</br>This endpoint can be used with either a client token or a user token.</br>When using a user token, you are only allowed to delete the account information for the user associated with the access token you supply in.</br>The optional export parameters may be passed as query parameters or in the request body.</br>In order to use this endpoint with client tokens, you must have that feature explicitly enabled on your account. It is disabled by default. Please contact the Sensibill team in order to have this enabled.</br> Deleting a user will also purge all documents from Sensibill''s system.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/DeleteUserExportParameter'
        - $ref: '#/components/parameters/DeleteUserExportEmailParameter'
      responses:
        '200':
          description: Success. The user was successfully queued for destruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to retrieve the information for the user you have requested. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
    put:
      operationId: upsertUser
      tags:
        - Users
      summary: Update account information
      description: 'This allows you to update the account information of a user. <br/><br/>This endpoint can be used with either a user token or a client token. <br/><br/>When using a user token, the userID can be either the Sensibill specific ID or "me", which will point to the user object for the user who is authenticated with the access token. <br/><br/>In order to use this endpoint with a client token, you must have this policy explicitly enabled on your account. It will be disabled by default. Please contact the Sensibill team if you need to have this policy enabled on your account. When using a client token,  you are only allowed to change the ''status'' field on a user''s account. This is provided so that Clients can disable and re-enable user accounts without requiring them to log in.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateRequest'
      responses:
        '200':
          description: Success. The information for the user account was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to update the information for this user. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
  /users/emailAvailability:
    get:
      operationId: getEmailAvailability
      tags:
        - Users
      summary: Check for the availability of an email address to register a new user.
      description: This endpoint allows you to check whether a particular email address to register a new account is available or not before you register a new user.<br/><br/>This endpoint can be used with either a client token or a user token.
      parameters:
        - $ref: '#/components/parameters/EmailParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the email address is available, and when it is not. You need to check the body of the response to see whether or not the email address is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAvailabilityResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit the email address, or the email address provided is not well formed.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /users/receiptEmailAvailability:
    get:
      operationId: getReceiptEmailAvailability
      tags:
        - Users
      summary: Check for the availability of a receipt email address.
      description: 'This endpoint allows you to check whether a particular receipt email address to register a new account is available or not before you register a new user. If the given email address is available, then this endpoint will return back a JSON object with the property available set to true. If the email address is taken, then this endpoint will return back the property available set to false, along with a list of alternative email addresses. <br/><br/>This endpoint can be used with either a client token or a user token.'
      parameters:
        - $ref: '#/components/parameters/ReceiptEmailParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the email address is available, and when it is taken. You need to check the body of the response to see whether or not the email address is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptEmailAvailabilityResponseDto'
        '400':
          description: Bad Request. This will occur if you omit the email address or if the email address is not well formed.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /users/usernameAvailability:
    get:
      operationId: getUsernameAvailability
      tags:
        - Users
      summary: Check for the availability of a username.
      description: 'This endpoint allows you to check whether a particular username to register a new account is available or not before you register a new user. If the given username is available, then this endpoint will return back a JSON object with the property available set to true. If the username is taken, then this endpoint will return back the property available set to false. <br/><br/>This endpoint can be used with either a client token or a user token. <br/><br/>In order to use this endpoint, you must have that policy explicitly enabled on your account. It is disabled by default. Please contact the Sensibill team in order to have this enabled.'
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
        - $ref: '#/components/parameters/UsernameAvailabilityCredentialTypeParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the username is available, and when it is taken. You need to check the body of the response to see whether or not the username is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameAvailabilityResponseDto'
        '400':
          description: Bad Request. This will occur if you omit the username.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /folders:
    get:
      operationId: getFolders
      tags:
        - Folders
      summary: List the folders for a user
      description: This endpoint allows you to list the folders in the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFoldersListResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
    post:
      operationId: createFolder
      tags:
        - Folders
      summary: Add a new folder for a user
      description: This endpoint allows you to add a folder to the authenticating user's account.
      requestBody:
        $ref: '#/components/requestBodies/FolderCreateRequest'
      responses:
        '200':
          description: Success. The folder was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderCreationResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
    delete:
      operationId: deleteFolders
      tags:
        - Folders
      summary: Delete multiple folders for a user
      description: This endpoint allows you to perform a batch deletion of folders on a User object.
      parameters:
        - $ref: '#/components/parameters/FolderIdsParameter'
        - $ref: '#/components/parameters/DeleteDocumentsParameter'
      requestBody:
        $ref: '#/components/requestBodies/FoldersDeleteRequest'
      responses:
        '200':
          description: Success. The folders were successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. One or more folderIDs you have provided in the request do not belong to this user. See the user object for a list of their folders.
  '/folders/{folderId}':
    put:
      operationId: upsertFolder
      tags:
        - Folders
      summary: Update a folder for a user
      description: This endpoint allows you to update a folder in the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/FolderUpdateRequest'
      responses:
        '200':
          description: Success. The folder was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID you have provided is not one of this user's folders. See the user object for a list of their folders.
    delete:
      operationId: deleteFolder
      tags:
        - Folders
      summary: Delete a folder for a user
      description: This endpoint allows you to delete a folder from the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
        - $ref: '#/components/parameters/DeleteDocumentsParameter'
      requestBody:
        $ref: '#/components/requestBodies/FolderDeleteRequest'
      responses:
        '200':
          description: Success. The folder was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID you have provided is not one of this user's folders. See the user object for a list of their folders.
  '/folders/{folderId}/documents':
    put:
      operationId: addDocumentsToFolder
      tags:
        - Folders
      summary: Add document(s) to folder
      description: This endpoint allows you to add one or more documents to a folder owned by the user
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/AddDocumentsToFolderRequest'
      responses:
        '200':
          description: Success. Documents were successfully added to folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsAddedOrRemovedFromFolderResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID or one of the receipt IDs you have provided do not exist or do not belong to the user.
    delete:
      operationId: removeDocumentFromFolder
      tags:
        - Folders
      summary: Remove document(s) from folder
      description: This endpoint allows you to remove multiple documents from a folder owned by the user
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
        - $ref: '#/components/parameters/DocumentIdsParameter'
      requestBody:
        $ref: '#/components/requestBodies/RemoveDocumentsFromFolderRequest'
      responses:
        '200':
          description: Success. Documents were successfully removed from the folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsAddedOrRemovedFromFolderResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID or one of the receipt IDs you have provided do not exist or do not belong to the user.
  
components:
  schemas:
    ApiInfoDto:
      type: object
      properties:
        hostname:
          type: string
          example: tor-some-name-api-04
        version:
          type: string
          example: '8124:8cd97163d91e'
        status:
          type: string
          example: online
        environment:
          type: string
          example: receipts_sandbox
        name:
          type: string
          example: Sensibill API Architecture - Receipts Sandbox
        booted_at:
          type: string
          format: date-time
        base_url:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/'
        endpoints:
          type: object
          properties:
            authorizationGrant:
              type: string
              example: authorizationGrant
            accessToken:
              type: string
              example: accessToken
            logout:
              type: string
              example: logout
            clientInfo:
              type: string
              example: clientInfo
            invalidateAccessToken:
              type: string
              example: invalidate
            jwtAuthenticate:
              type: string
              example: jwtAuthenticate
            usernameAvailability:
              type: string
              example: users/usernameAvailability
            emailAvailability:
              type: string
              example: users/emailAvailability
            registerUser:
              type: string
              example: users
            jwtRegister:
              type: string
              example: jwtRegister
            users:
              type: string
              example: users
            userDetail:
              type: string
              example: 'users/:userId'
            deleteUser:
              type: string
              example: users
            updateUser:
              type: string
              example: users
            forgotpassword:
              type: string
              example: users/forgotpassword
            resetpassword:
              type: string
              example: users/resetpassword
            exportDocuments:
              type: string
              example: export
            listExports:
              type: string
              example: exports
            exportStatus:
              type: string
              example: 'export/:id'
            lookupSupportedCurrencies:
              type: string
              example: lookups/currencies
            lookupSupportedLocales:
              type: string
              example: lookups/locales
            merchantsList:
              type: string
              example: merchants
            documentsList:
              type: string
              example: documents
            documentsPost:
              type: string
              example: documents
            documentsDelete:
              type: string
              example: documents
            documentsPatch:
              type: string
              example: 'documents/:id'
            documentsDetail:
              type: string
              example: 'documents/:id'
            listFolders:
              type: string
              example: folders
            createFolder:
              type: string
              example: folders
            deleteFolders:
              type: string
              example: folders
            updateFolder:
              type: string
              example: 'folders/:folderId'
            deleteFolder:
              type: string
              example: 'folders/:folderId'
            addDocumentsToFolder:
              type: string
              example: 'folders/:folderId/documents'
            deleteDocumentsFromFolder:
              type: string
              example: 'folders/:folderId/documents'
    FolderCreateRequestDto:
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          example: MyOtherFolder
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: aa0000
          description: 'Six hex digits representing the color of this folder, e.g. <code>cc0000</code> or <code>9b1515</code>.'
    FolderUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          example: MyOtherFolder
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: aa0000
          description: 'Six hex digits representing the color of this folder, e.g. <code>cc0000</code> or <code>9b1515</code>.'
    FolderDeleteRequestDto:
      type: object
      properties:
        deleteDocuments:
          type: boolean
          default: false
          description: Delete any documents that are in this folder.
    FoldersDeleteRequestDto:
      type: object
      required:
        - folders
      properties:
        folders:
          type: array
          items:
            type: string
            description: List of folder IDs that you want deleted.
            example: 6OeYUlNyyeVHEmHMLmgZ
        deleteDocuments:
          type: boolean
          default: false
          description: Delete any documents that are in this folder.
    GetFoldersListResponseDto:
      type: object
      required:
        - folders
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/FolderListItemDto'
    FolderListItemDto:
      type: object
      required:
        - id
        - name
        - color
        - updatedAt
        - createdAt
        - count
      properties:
        id:
          type: string
          minLength: 5
          maxLength: 75
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          example: 6OeYUlNyyeVHEmHMLmgZ
          description: The id of the folder
        name:
          type: string
          example: Renovations-2021-Jan
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: cc0000
          description: Six hex digits representing the color of this folder.
        updatedAt:
          type: string
          format: date-time
          example: '2015-09-30T17:56:45.236Z'
        createdAt:
          type: string
          format: date-time
          example: '2015-11-30T17:56:45.236Z'
        count:
          type: integer
          example: 3
        totals:
          type: array
          items:
            $ref: '#/components/schemas/FolderListItemTotalsDto'
    FolderListItemTotalsDto:
      type: object
      required:
        - count
        - amount
        - currencyCode
        - displayAmount
      properties:
        amount:
          type: number
          example: 35.53
          description: The total amount of all receipts in the folder matching the currency code.
        count:
          type: integer
          example: 3
          description: The count of all reeipts in the folder matching the currency code. Must be a valid currency code as returned by our /lookups/currencies endpoint
        currencyCode:
          type: string
          example: CAD
          description: The currency code associated with the total amount of the receipts in the folder matching this currency. It will be a valid currency code as returned by our /lookups/currencies endpoint
        displayAmount:
          type: string
          example: $35.53
          description: 'The total amount of all receipts in the folder matching the currency code formatted based on the specified locale, or if not specified the locale of the user.'
    FolderCreationResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 5
          maxLength: 75
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          example: 9k-mU2YuNiakP0O2mCvF
    DocumentsAddedOrRemovedFromFolderResponseDto:
      type: object
      required:
        - updated
      properties:
        updated:
          type: integer
          example: 2
    AddOrRemoveDocumentsFromFolderDto:
      type: object
      required:
        - documentIds
      properties:
        documentIds:
          type: array
          items:
            type: string
            example: Iw6DUSraLoGOnHiL2Ps4pBz8F1oQCndA4UhzS80OAHDg0LxpJzRtmUr89sFrYS2DfQfbhhkF8kPe5jF9_nFE
    JwtAuthenticateRequestDto:
      type: object
      required:
        - client
      properties:
        client:
          type: string
          description: The clientID of the user's client.
          example: first_canadian_bank
    AccessTokenRequestDto:
      type: object
      required:
        - grant_type
        - refresh_token
        - redirect_uri
      properties:
        grant_type:
          default: ''
          type: string
          example: authorization_code
          description: 'This is the type of authentication the client is presenting for its access-token.</br> If the client is looking for a client-token, then this should be set to ''client_credentials''.</br> If the client is looking to swap an authorization grant for an access token, this should be setto ''authorization_code''</br> If the client is looking to swap a refresh_token for a new access token, this should be setto ''refresh_token'''
        redirect_uri:
          default: ''
          type: string
          example: 'https://testclient.com/redirect'
          description: 'If the client is swapping an authorization code for an access token, then this argument is required.If you are just obtaining a client token directly, you do not need to provide a redirect_uri. This must be the same redirect_uri that was provided to the authorizationGrant endpoint, and must also match the redirect_uri which was registered with your client when you received your client credentials.'
        code:
          default: ''
          type: string
          example: DBhXEQiQiwqCV4hI61HX7NZfqCeGLpYt72ZCkAl-ZDQOjRKpKCVxBTLuhdc0-pX5xdM-4KfBdidwPJy05Oxs3w
          description: 'If the client is swapping an authorization code for an access token, then this argument is required.If you are just obtaining a client token directly, you do not need to provide a code. This parameteris the authorization_code which you obtained when you used the authorizationGrant endpoint.'
        refresh_token:
          default: ''
          type: string
          description: 'If the client is swapping a refresh_token for an access token, then this argument is required.Otherwise, this parameter should be omitted.This parameter is the refresh_token which you obtained when you last used the access_token endpoint.'
    JwtAuthenticateResponseDto:
      type: object
      properties:
        token_id:
          type: string
          description: 'A random string that may be used to generate signed URLs for certain resources, in circumstances where it is not possible to pass an Authorization header. For example, when showing an embedded image in a web page.'
          example: FA0Ui__ecxisIrNowkytya8ff5vS9FNnxQHGE7EoT7Tl
        access_token:
          type: string
          description: The access token which can be used as a bearer token for authenticated requests.
          example: b9E3EbzmJLf2mGBVevKra8u8PjFKU4kUGIb2lLvoKHV4_bvbxHSi5K6uu32MvhGDvsJS9pdGn9aR-V4WVyTySg
        expires_in:
          type: integer
          description: The number of seconds until the token expires.
          example: 10800
    AccessTokenResponseDto:
      type: object
      properties:
        token_id:
          type: string
          example: oRXBt_-3HsVLr1B_51U_bscYdp1-xrhqey0sBxJrEHD-
        access_token:
          type: string
          example: vVYGgu3HiktX4CgZVakDklQoL9uLw5qPibQdbMNt0dnH4L_oVTBHhXmDn-G99RJ6cimusHRhtERfZO7jtPkwDg
        refresh_token:
          type: string
          example: kLDmKsaak0vbiMiVn6p7V0HXaaI6rVkt6z5fNKpSLHE038fWG3wCwkL0QDDwdn3_z9k-9PKs7yaWx5qX52lnOA
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 10800
        refresh_expires_in:
          type: integer
          example: 21600
    ClientPoliciesDto:
      type: object
      properties:
        _id:
          type: string
          example: 55fb3657eef7ae084d000051
        webSDKOptions:
          type: object
          properties:
            webDebug:
              type: boolean
              example: false
            webBaseUrl:
              type: string
            webSDKUrl:
              type: string
        registrationEmails:
          type: array
          items:
            type: string
        registrationEmailPolicyMode:
          type: string
          example: norestriction
        receiptEmailDomainPolicyMode:
          type: string
          example: norestriction
        credentialTypePolicyMode:
          type: string
          example: norestriction
        featurePolicyMode:
          type: string
          example: norestriction
        features:
          type: array
          items:
            type: string
        allowedFeatures:
          type: object
          properties:
            clientCanDisableUser:
              type: boolean
              example: false
            clientCanRetrieveUserData:
              type: boolean
              example: false
            clientCanDestroyUsers:
              type: boolean
              example: false
            enhancedReceiptView:
              type: boolean
              example: true
            editing:
              type: boolean
              example: true
            userManagement:
              type: boolean
              example: true
            navigation:
              type: boolean
              example: true
            registration:
              type: boolean
              example: true
            noReceiptAccount:
              type: boolean
              example: false
            nonEmailUsernames:
              type: boolean
              example: false
            merchantLogo:
              type: boolean
              example: true
            merchantColor:
              type: boolean
              example: true
            menuViewAll:
              type: boolean
              example: true
            forgotPassword:
              type: boolean
              example: true
            feedback:
              type: boolean
              example: true
            enableExportEmails:
              type: boolean
              example: true
            emailNotifications:
              type: boolean
              example: true
            advertiseEmailForwarding:
              type: boolean
              example: true
        credentialTypes:
          type: array
          items:
            type: string
            example: sensibill
        receiptEmailDomains:
          type: array
          items:
            type: string
            example: billpass.ca
        receiptEmailDomainsAndAliases:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5730f6eab57118365a00024c
              emailDomain:
                type: string
                example: billpass.ca
              aliases:
                type: array
                items:
                  type: string
                  example: billpass.ca
        featureOptions:
          type: object
          properties:
            insights:
              type: object
              properties:
                deactivationDate:
                  type: string
                activationDate:
                  type: string
            achievements:
              type: object
              properties:
                deactivationDate:
                  type: string
                activationDate:
                  type: string
            outgoingEmail:
              type: object
              properties:
                frontendUrlBase:
                  type: string
                emailViewPrefix:
                  type: string
                senderAddress:
                  type: string
            metrics:
              type: object
              properties:
                siteID:
                  type: string
                trackingURL:
                  type: string
                enableMetrics:
                  type: boolean
                  example: false
            camera:
              type: object
              properties:
                frontendAutomaticCaptureTimeout:
                  type: integer
                  example: 10
                showLongReceiptCapture:
                  type: boolean
                  example: true
                frontendCameraCaptureDefault:
                  type: string
                  example: auto
                showAutomaticCapture:
                  type: boolean
                  example: true
            showNotificationCenter:
              type: boolean
              example: true
            enableOfflineSupport:
              type: boolean
              example: true
            filters:
              type: object
              properties:
                showPaymentFilter:
                  type: boolean
                  example: true
                showDateFilter:
                  type: boolean
                  example: true
                showCurrencyFilter:
                  type: boolean
                  example: true
                showFilters:
                  type: boolean
                  example: true
            listingScreen:
              type: object
              properties:
                showWeeklyGrouping:
                  type: boolean
                  example: true
                showMonthlyGrouping:
                  type: boolean
                  example: true
            issueReporting:
              type: object
              properties:
                showAdditionalFeedback:
                  type: boolean
                  example: true
                showIssueReporting:
                  type: boolean
                  example: true
            showExpenseType:
              type: boolean
              example: true
            showTips:
              type: boolean
              example: true
            reminders:
              type: object
              properties:
                enableReturnReminders:
                  type: boolean
                  example: true
                enableWarrantyReminders:
                  type: boolean
                  example: true
                showReminders:
                  type: boolean
                  example: true
            showCategories:
              type: boolean
              example: true
            showNotes:
              type: boolean
              example: true
            showTags:
              type: boolean
              example: true
            showFavorites:
              type: boolean
              example: true
            showFolders:
              type: boolean
              example: true
            exports:
              type: object
              properties:
                populateName:
                  type: boolean
                  example: false
                requireAuthentication:
                  type: boolean
                  example: true
                enableExportNotifications:
                  type: boolean
                  example: true
                showExports:
                  type: boolean
                  example: true
            showUserManagement:
              type: boolean
              example: true
            registration:
              type: object
              properties:
                receiptAccountEmail:
                  type: string
                  enum:
                    - optional
                    - required
                    - disabled
                  example: optional
                requireReceiptAccount:
                  type: boolean
                  example: true
                requireEmails:
                  type: boolean
                  example: true
                showRegistration:
                  type: boolean
                  example: true
            showEditing:
              type: boolean
              example: true
            showBarcodeDisplay:
              type: boolean
              example: true
            showNavigation:
              type: boolean
              example: true
            enableReceiptLinking:
              type: boolean
              example: false
            enableEnhancedReceiptView:
              type: boolean
              example: true
            receiptDisplayLevel:
              type: integer
              example: 3
            enableEmailNotifications:
              type: boolean
              example: true
            showForgotPassword:
              type: boolean
              example: true
            branding:
              type: object
              properties:
                emailPrimaryColor:
                  type: string
                showPoweredByLogo:
                  type: boolean
                  example: true
                showMerchantLogos:
                  type: boolean
                  example: true
                showMerchantColors:
                  type: boolean
                  example: true
    userRequestProperties:
      type: object
      properties:
        credentialType:
          default: sensibill
          type: string
          description: 'This is the type of credentials that will be used to identify the newly created user uniquely to Sensibill. If a user is logging in with their account on Sensibill, this parameter should be "sensibill". If you are implementing a third-party single-sign-on based solution, this should be set to the credentialType that you were issued with your client credentials.'
        accessID:
          type: string
          example: test@test.com
          description: 'If you are using third-party single-sign-on, then this parameter is what is used to uniquely identify this user account to Sensibill systems. It is equivalent to a username.'
        accessSecret:
          type: string
          description: 'If you are using third-party single-sign-on, then this parameter is what is used to verify that you are the owner of this Sensibill account. It is equivalent to a password.'
        email:
          type: string
          format: email
          example: test@test.com
          description: 'The email address of the user. Typically only used by clients who want to allow sending email notifications directly from Sensibill. May be required, depending on your client configuration.'
        password:
          type: string
          description: 'The password for the user account. If you are creating a Sensibill account, this parameter is required. If you are using third-party single-sign-on, this parameter is optional'
    UserRequestDto:
      allOf:
        - $ref: '#/components/schemas/commonRegistrationParameters'
        - $ref: '#/components/schemas/userRequestProperties'
    JwtUserRequestDtoProperties:
      type: object
      required:
        - client
      properties:
        client:
          type: string
          description: The clientID of the new user's client.
    JwtUserRequestDto:
      allOf:
        - $ref: '#/components/schemas/commonRegistrationParameters'
        - $ref: '#/components/schemas/JwtUserRequestDtoProperties'
    userUpdateDtoProperties:
      type: object
      properties:
        status:
          type: string
          description: 'The status of the user''s account. Can be either ''registered'' or ''disabled''. NOTE! If you set a user''s account as ''disabled'', no API calls will be able to be made for that user - their access tokens will no longer work, including the one you may be using to make this API call.'
        receiptAccountEmail:
          type: string
          description: 'The email address to the user''s receipt account. This must be unique across all users registered with Sensibill, including both Sensibill accounts and third-party single-sign-on accounts. This will always be converted to a lower case value. This can only be set after registration if you client has been setup to indicate this parameter is optional during registration. The email address must use a permitted domain for your client.  Note: the receiptAccountEmail can only be set once for a user.'
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        defaultCurrency:
          type: string
          description: 'Provides the default currency for the user. Must be an currency-code on the supported list of currencies, which can be obtained by going to /lookups/currencies'
        locale:
          type: string
          description: 'Provides the locale for the user. Must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales'
    UserUpdateDto:
      $ref: '#/components/schemas/userUpdateDtoProperties'
    commonRegistrationParameters:
      type: object
      properties:
        receiptAccountEmail:
          example: test@billpass.ca
          type: string
          description: 'The email address to the users receipt account. This must be unique across all users registered with Sensibill, including both Sensibill accounts and third - party single - sign - on accounts.This will always be converted to a lower case value. Your client can be set up based on whether this parameter is required during registration, or if it is optional so that it can be specified later.The email address must use a permitted domain for your client.'
        firstName:
          example: John
          type: string
          description: The first name of the user. It is strongly encouraged that this be set to provide a more personalized experience for users.
        lastName:
          example: Smith
          type: string
          description: The last name of the user.
        defaultCurrency:
          type: string
          description: 'Provides the default currency for the user. Must be an currency-code on the supported list of currencies, which can be obtained by going to /lookups/currencies'
        folders:
          default: []
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              color:
                type: string
                example: '#ABCDEF'
              id:
                type: string
          description: 'Every element of the array should be an object with the folder''s `name`, `color` (as six hex digits) and `id`.'
        createTestReceipts:
          type: boolean
          description: Can be either "true" or "false". This parameter can be used by early integration partners during testing to create a number of ake testing receipts for the accounts they create.
    GenericIdString:
      type: string
      minLength: 5
      maxLength: 75
      pattern: ^[a-zA-Z0-9-_:.]{5,75}$
    CurrencyCodeDto:
      type: string
      maxLength: 3
      minLength: 3
      pattern: ^[A-Z]{3}$
    DocumentTaxDto:
      type: object
      properties:
        amount:
          type: number
          example: 123.2
        percent:
          type: number
          example: 1.2
        type:
          type: string
          maxLength: 15
          example: GST
    CurrencyCodeEnum:
      description: 3 character ISO-4217 currency code
      type: string
      nullable: true
      enum:
        - USD
        - CAD
        - GBP
        - EUR
        - NZD
        - AUD
        - BRL
        - CLP
        - CNY
        - CZK
        - DKK
        - HKD
        - HUF
        - INR
        - IDR
        - ILS
        - JPY
        - MYR
        - MXN
        - NOK
        - PKR
        - PHP
        - PLN
        - RUB
        - SGD
        - ZAR
        - KRW
        - SEK
        - CHF
        - TWD
        - THB
        - TRY
    DocumentTimeDto:
      type: string
      pattern: ^\d{2}:\d{2}$
    DocumentSourceFormatsEnum:
      type: string
      enum:
        - pdf
        - image
        - raw_text
        - pdf_email
        - html_email
        - image_email
        - text_email
    DocumentSourceFormatsArray:
      type: array
      description: Array of sourceFormats for the operation.
      items:
        $ref: '#/components/schemas/DocumentSourceFormatsEnum'
      maxItems: 7
    DocumentTypeEnum:
      description: |
        The document type that is being posted.
        Only clients with the feature flag enableInvoice enabled are allowed to submit `documentType = 'invoice'`.
      type: string
      enum:
        - invoice
        - receipt
    DocumentSortByEnum:
      type: string
      enum:
        - arrivalDateTime
        - documentDate
        - documentTime
      default: arrivalDateTime
    DocumentOrderByEnum:
      type: string
      enum:
        - ASC
        - DESC
      default: DESC
    DocumentStatusTypeEnum:
      type: string
      description: |
        The status of the document involved or used for the operation. Supported statusses include :
        * CompletedSuccess
        * CompletedFailed
        * InProcessing
      enum:
        - CompletedSuccess
        - CompletedFailed
        - InProcessing
    DocumentStatusTypesArray:
      type: array
      description: Array of document status to use for the operation.
      items:
        $ref: '#/components/schemas/DocumentStatusTypeEnum'
      maxItems: 3
    ExportItemStatusEnum:
      type: string
      description: |
        The status of the export. Possible values are: `'queued'`, `'processing'`, `'completed'`, `'failed'`
      example: completed
      enum:
        - failed
        - queued
        - completed
        - processing
        - noDocumentsFound
    DocumentCreateDto:
      type: object
      required:
        - documentType
      properties:
        description:
          type: string
          description: A user specified name or description for this document. Values should ideally satisfy the /^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$/ pattern which prohibits the `;` punctuation.
          maxLength: 75
          pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
        sourceFile:
          type: string
          format: binary
          description: |
            The binary data to be attached within a multi-part form.
            The file type can be either JPG, GIF, PNG or PDF and the maximum file size for the file is 5 MB.
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        foreignId:
          type: string
          maxLength: 75
          pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
          description: |
            An integrator supplied identifier that must be unique. In case of upload failure or loss of document Id this 
            foreignId can be used on a new request with the source file to receive the original document id without our system reprocessing the source file.
          example: doc-123-sub
        accountMetadata:
          $ref: '#/components/schemas/DocumentAccountMetadataDto'
    DocumentDeleteDto:
      type: object
      required:
        - ids
      properties:
        ids:
          description: An array of documents ids that should be deleted from the system.
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/GenericIdString'
          example:
            - XuncoaVG7XMTY0iWHTCa
            - BuDcoaVG74MTY0iWIYKq

    TenderTypesEnum:
      type: string
      enum:
        - Amex
        - Cash
        - Check
        - Coupon
        - Credit
        - CreditDebit
        - CustomerAccount
        - Debit
        - DinersClub
        - Fleet
        - GiftCard
        - GiftCertificate
        - HouseAccount
        - Interac
        - InternationalMaestro
        - Loyalty
        - MasterCard
        - Paypal
        - Prepaid
        - StoreCard
        - StoredValue
        - TravelersCheck
        - UKMaestro
        - VisaCredit
        - VisaDebit
        - Visa
        - Voucher
    AuthorizationResponse:
      type: object
      properties:
        code:
          type: string
          example: DBhXEQiQiwqCV4hI61HX7NZfqCeGLpYt72ZCkAl-ZDQOjRKpKCVxBTLuhdc0-pX5xdM-4KfBdidwPJy05Oxs3w
    ClientInfoResponseDto:
      type: object
      properties:
        clientID:
          type: string
          example: examplebank
          description: A short string identifier for the client.
        name:
          type: string
          example: Example Bank
          description: A human-readable name for the client.
        type:
          type: string
          description: A short identifier classifying the client.
        status:
          type: string
          example: active
        key:
          type: string
          example: R14KjAShhJCRgYObBu-P8t9PuVdDsFpIYcxmhfHWOA5Q
          description: 'For clients using OAuth, the OAuth client key.'
        redirectURI:
          type: string
          example: 'https://testclient.com/redirect'
          description: 'For clients using OAuth, the expected redirectURI.'
        policies:
          type: array
          description: An array of objects describing the available options and settings for the client in detail.
          items:
            $ref: '#/components/schemas/ClientPoliciesDto'
        authenticationSettings:
          type: object
          properties:
            oauth:
              type: boolean
              example: true
            refreshTokenExpiryDays:
              type: integer
              example: 30
            accessTokenExpiryMinutes:
              type: integer
              example: 43200
            setTempAccessSecret:
              type: boolean
              example: false
            disablePasswordStrengthCheck:
              type: boolean
              example: false
            maximumFailedLoginAttempts:
              type: integer
              example: 0
            jwt:
              type: boolean
              example: false
        notificationSettings:
          type: object
          description: An object describing which notifications could be sent for this client.
          properties:
            accountUpdates:
              type: boolean
        providerIDs:
          type: object
          description: Identifiers for external integrations used by this client.
          properties:
            gmail:
              type: string
              example: myGmailID123
            outlook:
              type: string
              example: myOutlookID123
        accessTokenExpiry:
          type: string
          format: date-time
          description: 'When called with a client access token, the date and time that the token will expire.'
          example: '2017-05-23T17:42:34.407Z'
    RegisterUserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: ZUZ3mDmSyCHlgwne7cNP
          description: 'A Sensibill-specific ID for the user. '
    UserResponseDto:
      type: object
      description: Get account info for current user
      properties:
        email:
          type: string
          example: john.smith@test.com
        receiptAccountEmail:
          type: string
          example: john@billpass.ca
        receiptCounts:
          type: object
          properties:
            favorite:
              type: integer
              example: 8
            thisMonth:
              type: integer
              example: 39
            total:
              type: integer
              example: 178
        emailCounts:
          type: object
          properties:
            nonreceipt:
              type: integer
              example: 3
            receipt:
              type: integer
              example: 9
            total:
              type: integer
              example: 12
        folders:
          type: array
          items:
            $ref: '#/components/schemas/SimplifiedFolderDto'
        notificationSettings:
          type: object
          properties:
            accountUpdates:
              type: object
              properties:
                email:
                  type: boolean
                  example: true
            receiptExport:
              type: object
              properties:
                email:
                  type: boolean
                  example: false
                push:
                  type: boolean
                  example: false
            other:
              type: object
              properties:
                email:
                  type: boolean
                  example: false
            receipt:
              type: object
              properties:
                includeOriginal:
                  type: boolean
                  example: true
                email:
                  type: boolean
                  example: true
                push:
                  type: boolean
                  example: true
        locale:
          type: string
          example: en-CA
        status:
          type: string
          example: registered
        lastName:
          type: string
          example: Smith
        firstName:
          type: string
          example: John
        id:
          type: string
          example: 6velPKW4OFChLWlpqXpJ
        accessID:
          type: string
          example: xyz12345
        credentialType:
          type: string
          example: somebank
        nickname:
          type: string
          example: jsmith
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertDto'
        pilotAccess:
          type: object
          properties:
            diagnostics:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false
        accessTokenExpiry:
          type: string
          format: date-time
          example: '2017-05-23T17:42:34.407Z'
        refreshTokenExpiry:
          type: string
          format: date-time
          example: '2017-05-30T17:42:34.407Z'
    SimplifiedFolderDto:
      type: object
      properties:
        id:
          type: string
          example: 6OeYUlNyyeVHEmHMLmgZ
          description: The id of the folder
        name:
          type: string
          example: Renovations-2021-Jan
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: cc0000
          description: Six hex digits representing the color of this folder.
        updatedAt:
          type: string
          format: date-time
          example: '2015-09-30T17:56:45.236Z'
        createdAt:
          type: string
          format: date-time
          example: '2015-11-30T17:56:45.236Z'
    AlertDto:
      type: object
      properties:
        name:
          type: string
          enum:
            - pending_validation
            - recently_added
            - duplicate
        count:
          type: integer
          example: 2
        list:
          type: array
          items:
            $ref: '#/components/schemas/UserReceiptDto'
    UserReceiptDto:
      type: object
      properties:
        objectType:
          type: string
          example: receipt
        receiptDate:
          type: string
          format: date-time
          example: '2015-08-30T00:00:00.000Z'
        listingSortDate:
          type: string
          format: date-time
          example: '2015-08-30T00:00:00.000Z'
        merchantName:
          type: string
          maxLength: 500
          example: Home Depot
          description: The name of the merchant. If no merchant is set this will contain the string 'Merchant?'
        renderURL:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/#/receipt/8eteXZALOgVRBz7jqQY_U1A7_pwO_jDW5yb-aSNkbaGgLSzVyEvN8VNSEfzIFw4koEc'
        total:
          type: object
          properties:
            grand:
              type: number
              example: 71.79
            currencyCode:
              type: string
              example: GBP
        id:
          type: string
          example: 8eteXZALOgVRBz7jqQY_U1A7_pwO_jDW5yb-aSNkbaGgLSzVyEvN8VNSEfzIFw4koEc
    EmptyObjectResponseDto:
      description: An empty object.  The noProperties property is a placeholder to help API generation
      type: object
      properties:
        noProperties:
          description: This property will not actually be returned.
          type: string
    EmailAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: true
          description: This is a flag that states if the email address is available or not for a new user registration.
    ReceiptEmailAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: 'true'
          description: This is a flag that states if the email address is available or not.
        alternatives:
          type: array
          items:
            type: string
            example: bob_smith@abc321bank.com
          description: 'This is a list of possible email addresses which are similar to the email address which the client requested availability for. If the email address is available, this list will be omitted.'
    UsernameAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: true
          description: This is a flag that states if the username is available or not.
    ListDocumentsCriteriaDto:
      type: object
      description: |
        The search criteria used to find the documents to be exported. \
        This will be identical to the filters used in the GET documents endpoint.
      properties:
        accountMetadata.account:
          type: array
          items:
            type: string
            maxLength: 75
            pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          maxItems: 20
          description: |
            Array of `accountMetadata.account` to filter the documents. Should ideally satisfy the `/^[a-zA-Z0-9-_:.]+$/` pattern \
            **Example:** `'accountMetadata.account': ['ACC102030', '405060']`
        accountMetadata.account.exists:
          type: boolean
          description: |
            This is used to match and include documents where a value *exists* for the `accountMetadata.account` property. \
            Only `true` or `false` boolean values are accepted. A mix of operators with basic values is not supported. 
            If `accountMetadata.account.exists` is provided together with plain values for account, this `exists` operator is ignored. \
            **Example:** To filter all documents with `accountMetadata.account` not set, use `accountMetadata.account.exists=false`
        accountMetadata.transactionId:
          type: array
          items:
            type: string
            maxLength: 75
            pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          maxItems: 20
          description: |
            Array of `accountMetadata.transactionId` to filter the documents. Should ideally satisfy the `/^[a-zA-Z0-9-_:.]+$/` pattern. \
            **Example:** `'accountMetadata.transactionId': ['TX00001', 'TX00002']`
        accountMetadata.transactionId.exists:
          type: boolean
          description: |
            This is used to match and include documents where a value *exists* for the `accountMetadata.transactionId` property. \
            Only `true` or `false` boolean values are accepted. A mix of operators with basic values is not supported. 
            If `accountMetadata.transactionId.exists` is provided together with plain values for account, this `exists` operator is ignored. \
            **Example:** To filter all documents with `accountMetadata.transactionId` not set, use `accountMetadata.account.transactionId=false`
        amountDue:
          type: array
          items:
            type: number
            minimum: 0
          maxItems: 20
          description: |
            Array of `amountDue` values to filter the documents. `afterTax` is the document property considered for the match. \
            **Example:** `'filter.amountDue': [1000.55, 1010.90]`
        amountDue.gte:
          type: number
          minimum: 0
          description: |
            This is a *greater than or equal to* filter on the `amountDue` value to filter the documents. `afterTax` is the document property considered for the match. \
            **Example:** `filter.amountDue.gte=1000.55`
        amountDue.lte:
          type: number
          minimum: 0
          description: |
            This is a *lesser than or equal to* filter on the `amountDue` value to filter the documents. `afterTax` is the document property considered for the match. \
            Example: `amountDue.lte=1000.55`
        arrivalDateTime.gte:
          type: string
          format: date-time
          description: |
            This is a filter condition *greater than or equal* on the `arrivalDateTime` to filter the documents.
            ArrivalDateTime value does not accept exact match and is expected to be UTC.
            Date time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`.
            Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable.

            * Example with just date: `arrivalDateTime.gte='2012-12-28'`
            * Example with date and time: `arrivalDateTime.gte='2012-12-28T21:27'`
            * Example with date and time: `arrivalDateTime.gte='2012-12-28 21:27:55.827'`
        arrivalDateTime.lte:
          type: string
          format: date-time
          description: |
            This is a filter condition *less than or equal* on the `arrivalDateTime` to filter the documents.
            ArrivalDateTime value does not accept exact match and is expected to be UTC.
            Date time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`.
            Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable.

            * Example with just date: `arrivalDateTime.lte='2012-12-28'`
            * Example with date and time: `arrivalDateTime.lte='2012-12-28T21:27'`
            * Example with date and time: `arrivalDateTime.lte='2012-12-28 21:27:55.827'` 
        categoryCode:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_ ]+$
            maxLength: 25
          maxItems: 20
          description: |
            Array of categoryCode to filter the documents. Example: `categoryCode=['business']`
        currencyCode:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyCodeDto'
          maxItems: 20
          description: |
            Array of currencyCode to filter the documents. Example: `currencyCode=['CAD', 'USD']`
        description:
          type: array
          maxItems: 20
          items:
            type: string
            maxLength: 75
            pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
          description: |
            Array of description values to filter the documents. The filter is case insentive and matches any document where the \
            description contains the given value. Should ideally satisfy the pattern /^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$/ \
            Example: `description=['Dinner with friends','Children winter gear','My very specific description']`
          example:
            - Dinner with friends
            - Children winter gear
            - My very specific description
        documentDate:
          type: array
          items:
            type: string
            format: date
          description: |
            Array of documentDate to filter the documents. Example: `documentDate=['2021-04-04']`
          example:
            - '2021-04-04'
        documentDate.gte:
          type: string
          format: date
          description: |
            This is a filter condition `greater than or equal` on the documentDate to filter the documents. \
            Example with single operator: `documentDate.gte='2012-12-28'`
          example: '2012-12-28'
        documentDate.lte:
          type: string
          format: date
          description: |
            This is a filter condition `less than or equal` on the documentDate to filter the documents. \
            Example with single operator: `documentDate.lte='2023-12-28'`
          example: '2023-12-28'
        documentNumber:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdString'
          maxItems: 20
          description: |
            Array of documentNumber to filter the documents. Example: `documentNumber=['1122334455']`
          example:
            - '1122334455'
        documentTime:
          type: array
          items:
            $ref: '#/components/schemas/DocumentTimeDto'
          maxItems: 20
          description: |
            Array of documentTime to filter the documents. Example: `documentTime=['21:12', '22:13', '23:14']`
          example:
            - '21:12'
            - '22:13'
            - '23:14'
        documentTime.gte:
          type: string
          pattern: ^\d{2}:\d{2}$
          description: |
            This is a filter condition `greater than or equal` on the documentTime to filter the documents.
            Example with single operator: `documentTime.gte='10:00'`
        documentTime.lte:
          type: string
          pattern: ^\d{2}:\d{2}$
          description: |
            This is a filter condition `less than or equal` on the documentTime to filter the documents.
            Example with single operator: `filter.documentTime.gte='10:00'`
        documentType:
          type: array
          description: 'Array of `documentType` to filter the documents. Currently supported values are [invoice, receipt].'
          items:
            $ref: '#/components/schemas/DocumentTypeEnum'
          maxItems: 20
        folder:
          type: array
          description: 'Will only return documents that are in one or more of the folder IDs specified. The folder IDs should match those set on the user that the document belongs to.'
          items:
            $ref: '#/components/schemas/GenericIdString'
          maxItems: 20
        foreignId:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdString'
          maxItems: 20
          description: Array of foreignId to filter the documents.
        id:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdString'
          maxItems: 20
          description: Array of document id to filter the documents.
        lastUpdateDateTime.gte:
          type: string
          format: date-time
          description: |
            This is a filter condition *greater than or equal* on the `lastUpdateDateTime` to filter the documents.
            `lastUpdateDateTime` field does not accept exact match.
            Date time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`. 
            Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable.

            * Example with just date: `lastUpdateDateTime.gte='2012-12-28'`
            * Example with date and time: `lastUpdateDateTime.gte='2012-12-28T21:27'`
            * Example with date and time: `lastUpdateDateTime.gte='2012-12-28 21:27:55.827'`
        lastUpdateDateTime.lte:
          type: string
          format: date-time
          description: |
            This is a filter condition *less than or equal* on the `lastUpdateDateTime` to filter the documents.
            `lastUpdateDateTime` field does not accept exact match.
            Date time formats allowed are: `YYYY-MM-DDTHH:mm:ss.SSS` or `YYYY-MM-DD HH:mm:ss.SSS`. 
            Time fields can be suppressed from the end to the beginning i.e. `YYYY-MM-DD HH:mm` is acceptable.

            * Example with just date: `lastUpdateDateTime.lte='2012-12-28'`
            * Example with date and time: `lastUpdateDateTime.lte='2012-12-28T21:27'`
            * Example with date and time: `lastUpdateDateTime.lte='2012-12-28 21:27:55.827'`
        merchantName:
          description: Array of merchantName to filter the documents.
          type: array
          maxItems: 10
          items:
            type: string
            pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]$
            maxLength: 500
        merchantTaxIdNumber:
          description: Array of merchantTaxIdNumber to filter the documents.
          type: array
          items:
            $ref: '#/components/schemas/GenericIdString'
          maxItems: 20
        paymentTender:
          description: Payment Tender array to filter the documents.
          type: array
          items:
            $ref: '#/components/schemas/TenderTypesEnum'
          maxItems: 20
        total:
          description: |
            Array of total to filter the documents. The value considered is afterTax.
            Items in the array will compose a logial `OR` chain in the query.
          type: array
          items:
            type: number
            minimum: 0
          example:
            - 1000.55
            - 1010.9
        total.gte:
          description: |
            This is a filter condition *greater than or equal* on the total value to filter the documents. The value considered is afterTax.
            All filter conditions will compose a logical `AND` chain in the query. \

            Example: `total.gte=1000.55`
          type: number
          minimum: 0
          example: 1000.55
        total.lte:
          description: |
            This is a filter condition *less than or equal* on the total value to filter the documents. The value considered is afterTax.
            All filter conditions will compose a logical `AND` chain in the query. \

            Example: `total.lte=1000.55`
          type: number
          minimum: 0
          example: 1000.55
        status:
          $ref: '#/components/schemas/DocumentStatusTypesArray'
        sourceFormat:
          $ref: '#/components/schemas/DocumentSourceFormatsArray'
    ExportCreateDto:
      type: object
      required:
        - outputFormats
        - criteria
      properties:
        outputFormats:
          description: |
            Indicates which formats should be generated. Valid values are:
            * 'csv' - indicates a comma separated file should be produced summarizing the exported data
            * 'xlsx' - indicates an excel spreadsheet should be produced summarizing the exported data
            * 'pdf' - indicates individual documents should be exported to a PDF file
          type: array
          items:
            $ref: '#/components/schemas/ExportOutputFormatsEnum'
          example: ['csv']
        criteria:
          $ref: '#/components/schemas/ListDocumentsCriteriaDto'
        locale:
          type: string
          description: 'Allows you to specify the locale in which the response should be returned. It must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales. It defaults to the user''s locale.'
          example: en-CA
    ExportResponseStatusEnum:
      type: string
      enum:
        - queued
        - noDocumentsFound
    ExportOutputFormatsEnum:
      description: |
        Indicates which formats should be generated. Valid values are:
        * 'csv' - indicates a comma separated file should be produced summarizing the exported data
        * 'xlsx' - indicates an excel spreadsheet should be produced summarizing the exported data
        * 'pdf' - indicates individual documents should be exported to a PDF file
      type: string
      enum:
        - csv
        - pdf
        - xlsx
    ExportCreateResponseDto:
      type: object
      required:
        - id
        - status
        - createdAt
        - outputFormats
        - documentsCount
        - destructionTime
      properties:
        destructionTime:
          type: string
          format: date-time
          example: '2021-01-01T21:58:15.880Z'
          description: The date and time of when this export object will be deleted from the system.
        createdAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:15.875Z'
        outputFormats:
          description: |
            Indicates which formats were requested. Valid values are:
            * 'csv' - indicates a comma separated file should be produced summarizing the exported data
            * 'xlsx' - indicates an excel spreadsheet should be produced summarizing the exported data
            * 'pdf' - indicates individual documents should be exported to a PDF file
          type: array
          items:
            $ref: '#/components/schemas/ExportOutputFormatsEnum'
          example: ['csv']
        documentsCount:
          type: integer
          maximum: 500
          minimum: 0
          example: 5
          description: The number of documents that matches the given criteria. The final number of documents in the export can be different from this one if documents are created or deleted between this POST request and the time when the request is processed.
        status:
          $ref: '#/components/schemas/ExportResponseStatusEnum'
        id:
          type: string
          example: IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA
          description: This is a unique identifier which is used to identify the export request on Sensibill's system.
    ExportsStatusDto:
      type: array
      maxItems: 500
      items:
        $ref: '#/components/schemas/ExportsResponseDto'
    ExportsResponseDto:
      type: object
      required:
        - id
        - status
        - documents
        - resultSize
        - createdAt
        - updatedAt
        - outputFormats
        - destructionTime
      properties:
        destructionTime:
          type: string
          format: date-time
          example: '2021-01-01T21:58:15.880Z'
        createdAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:15.875Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:18.787Z'
        resultSize:
          type: integer
          maximum: 500
          example: 5
          description: The number of documents captured in the export.
        completionTime:
          type: string
          format: date-time
          example: '2020-12-18T21:58:18.780Z'
        fileURL:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/api/v2/exports/IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA/contents'
          description: The URL that can be used to download the contents of the export. Response header Content-Type is set depending on the exported file format.
        outputFormats:
          description: |
            Indicates which formats were requested. Valid values are:
            * 'csv' - indicates a comma separated file should be produced summarizing the exported data
            * 'xlsx' - indicates an excel spreadsheet should be produced summarizing the exported data
            * 'pdf' - indicates individual documents should be exported to a PDF file
          type: array
          items:
            $ref: '#/components/schemas/ExportOutputFormatsEnum'
          example: ['csv']
        documents:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                example: xE1IVKvIRiUq5gqN_z04
        status:
          $ref: '#/components/schemas/ExportItemStatusEnum'
        id:
          type: string
          example: IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA
          description: This is a unique identifier which is used to identify the export request on Sensibill's system.
          # TODO inherited from v1. Should be fileSize instead
        filesize:
          type: integer
          example: 11042
          description: 'The size of the contents in bytes, when available.'
    GetLookupCategoryListResponseDto:
      type: object
      properties:
        documentCategories:
          type: array
          items:
            $ref: '#/components/schemas/DocumentCategoryListItemDto'
    DocumentCategoryListItemDto:
      type: object
      required:
        - code
        - name
        - icon
      properties:
        code:
          type: string
          example: shopping
          description: The code representing the document category.
        name:
          type: string
          example: General Retail
          description: The name of the document category.
        icon:
          type: string
          format: uri
          example: 'https://receipts-sandbox.sensibill.io/img/categories/select-category/select-category-general-retail-active@3x.png'
          description: The URL of the icon associated with the document category.
    GetLookupCurrencyListResponseDto:
      type: object
      required:
        - currencies
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/DocumentCurrencyListItemDto'
    DocumentCurrencyListItemDto:
      type: object
      required:
        - name
        - code
        - symbol
      properties:
        name:
          type: string
          example: United States Dollar
          description: The name of the currency in English, or translated if a non-English locale was provided used to handle the request
        code:
          type: string
          example: USD
          description: The internationally recognized three-letter code for the currency.
        symbol:
          type: string
          example: $
          description: The internationally recognized symbol representing the currency.
    GetLookupLocaleListResponseDto:
      type: object
      required:
        - locales
      properties:
        locales:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLocaleListItemDto'
    DocumentLocaleListItemDto:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          example: English - Canada
          description: The name of the locale in English.
        code:
          type: string
          example: en-CA
          description: The short code of the locale.
    MerchantsDto:
      type: object
      required:
        - merchants
      properties:
        merchants:
          type: array
          items:
            type: object
            required:
              - name
              - merchantID
            properties:
              merchantID:
                type: string
                example: amazon
              name:
                type: string
                example: Amazon
              documentCateogry:
                type: string
                example: General Retail
    CountryCode:
      type: string
      description: 2 character country code (lower case)
      enum:
        - ca
        - us
        - uk
        - ie
        - es
        - nl
    DocumentDiscountDto:
      description: Contains info about one applied discount.
      allOf:
        - $ref: '#/components/schemas/DocumentTaxableAmountDto'
        - type: object
          properties:
            description:
              description: A user-presentable description of this discount.
              type: string
              example: 10.00%
            methodCode:
              description: A code used by the merchant to identify this discount
              type: string
              example: Home Sense
            percent:
              description: 'May be set if this discount is percent based, where a value of N represents an N% discount.'
              type: number
            type:
              $ref: '#/components/schemas/DiscountTypesEnum'
            taxes:
              type: array
              items:
                $ref: '#/components/schemas/DocumentTaxDto'
    DiscountTypesEnum:
      description: May be set to describe how this discount was obtained.
      type: string
      enum:
        - general
        - coupon
    DocumentFeeDto:
      description: Contains info about one applied fee.
      allOf:
        - $ref: '#/components/schemas/DocumentTaxableAmountDto'
        - type: object
          properties:
            description:
              description: A user-presentable description of this fee.
              type: string
            type:
              $ref: '#/components/schemas/FeeTypesEnum'
            taxes:
              type: array
              items:
                $ref: '#/components/schemas/DocumentTaxDto'
    FeeTypesEnum:
      description: May be set to give more details on the type of fee.
      type: string
      enum:
        - donation
        - shipping
        - duties
        - general
    DocumentItemDto:
      properties:
        description:
          description: An additional description of an item.
          type: string
          example: Sony Big TV
        brand:
          type: string
          description: The brand name of this item.
          example: Sony
        buyLink:
          type: string
          description: A link to this item on the retailer's website.
          example: 'https://www.example.com/buy/123'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DocumentDiscountDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/DocumentFeeDto'
        imageUrl:
          type: string
          description: A url to an image of this item.
          example: 'https://example.com/somepath/1.png'
        itemIds:
          description: 'A set of strings set by the merchant to identify this item. The meaning of these values vary by merchant, and are not guaranteed to be unique in any way.'
          type: array
          items:
            type: string
            example: wh1000xm2
        listPrice:
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        loyaltyRewards:
          $ref: '#/components/schemas/DocumentLoyaltyRewardsDto'
        name:
          type: string
          description: 'A user-presentable name for this item, which should be the main content of the line item.'
          example: ''
        price:
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        priceBeforeDiscountsFees:
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        properties:
          description: Will be used to define miscellaneous item properties.
          type: array
          items:
            type: object
            properties:
              name:
                description: A name that describes this property.
                example: color
                type: string
              value:
                description: The value for this property.
                type: string
                example: red
        serialNumbers:
          description: The serial number of the item.
          type: array
          items:
            type: string
            example: 1142961142968QWICA
        sku:
          type: string
          description: The SKU for this item as is on the receipt.
          example: 11429681A/2
        unitListPrice:
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        unitOfMeasure:
          type: string
          description: The unit of measure of the item.
          example: L
        unitPrice:
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        unitQuantity:
          type: number
          description: The quantity of units of the item. If there is a unit of measure this will be the quantity of the specified units of measure.
          example: 2
    DocumentLoyaltyRewardsDto:
      description: Describes loyalty rewards read from the receipt.
      properties:
        accountNumber:
          type: string
          description: Loyalty rewards account number
          example: AN-4535-6628
        currentBalance:
          type: number
          description: The current balance of the rewards program after adding the number of loyalty points.
          example: 10500
        nextRewardLevel:
          type: number
          description: The milestone number of points needed to reach the next level of the rewards program.
          example: 15000
        pointsAwarded:
          type: number
          description: The total number of points awarded for a given receipt or line item.
          example: 500
        programName:
          type: string
          description: Loyalty rewards program name.
          example: PC Optimum
    DocumentTaxableAmountDto:
      type: object
      properties:
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/DocumentTaxDto'
        beforeTax:
          type: number
          example: 12.2
        afterTax:
          type: number
          example: 12.2
    DocumentPaymentDto:
      type: object
      properties:
        afterTax:
          type: number
          description: The amount paid with this payment.
          example: 9.99
        cashBack:
          type: number
          description: Cash back amount if applicable.
          example: 9.99
        changeAdjustment:
          type: number
          description: The difference between the changeDue and the changeIssued amounts.
          example: 9.99
        changeDue:
          type: number
          description: Change due amount for cash payments
          example: 9.99
        changeIssued:
          type: number
          description: ' Change amount that was actually issued (after rounding if any) for cash payments'
          example: 9.99
        currencyCode:
          $ref: '#/components/schemas/CurrencyCodeEnum'
        maskedCardNumber:
          type: string
          description: A masked version of the card (if any) used in the payment. Typically in the format **** NNNN for the last 4 digits of a credit card but MAY be different if other cards like gift cards are used.
          example: '**** 9900'
        type:
          $ref: '#/components/schemas/TenderTypesEnum'
    DocumentMerchantDto:
      type: object
      properties:
        addressLines:
          description: The address of the merchant on this document.
          type: array
          items:
            type: string
        merchantId:
          type: string
          description: The merchant id of the merchant as stored in sensibill's system
          example: homesense
        merchantName:
          type: string
          maxLength: 500
          description: The name of the merchant.
          example: Home Sense
        email:
          type: string
          description: The email for the merchant.
          example: Home Sense
        geoLocation:
          type: string
          description: The geolocation for the merchant.
          example: +43.6645326-79.3845407
        storeName:
          type: string
          description: The specific store name of this merchant.
          example: Mike's Home Sense
        storeId:
          description: The store id as stored in the sensibill system.
          type: string
          example: Mike's Home Sense
        telephone:
          description: The phone number for this merchant.
          type: string
          example: (647) 258-0801
        channel:
          $ref: '#/components/schemas/OrderChannelTypesEnum'
        categoryCode:
          type: string
          pattern: ^[a-zA-Z0-9-_ ]+$
          maxLength: 25
          description: The category this merchant belongs to.
          example: shopping
        taxIdNumber:
          description: The tax number for this merchant.
          type: string
          example: 11111 1111 RT0001
        url:
          description: The home webpage for this merchant.
          type: string
          example: Home Sense
    OrderChannelTypesEnum:
      type: string
      description: Indicates if the receipt came from a brick and mortar or online channel. Not related to format of receipt.
      enum:
        - online
        - physical
    DeliveryDto:
      type: object
      description: 'Details about an expected delivery. Note: these details are as they appear on the receipt, they are NOT updated automatically'
      properties:
        addressLines:
          type: array
          items:
            type: string
          description: ''
        courier:
          $ref: '#/components/schemas/CourierDto'
        deliveryType:
          $ref: '#/components/schemas/DeliveryTypesEnum'
        expectedShipmentDate:
          type: string
          format: date
        name:
          type: string
          description: ''
        telephoneNumber:
          type: string
          description: ''
        trackingNumber:
          type: string
          description: ''
    CourierDto:
      description: Information about the courier being used.
      type: object
      properties:
        name:
          type: string
          description: A user-presentable name for the courier.
        serviceLevel:
          type: string
          description: A user-presentable shipping service level used.
          example: Express Air Mail
    DeliveryTypesEnum:
      type: string
      description: Type of delivery
      enum:
        - pickup
        - delivery
        - shipping
    DocumentAccountMetadataDto:
      type: object
      properties:
        account:
          type: string
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          description: An optional identifier representing the bank account from the financial institution to associate this document with
          maxLength: 75
          example: EsmtpT9xa2S4gXym9GHBJrLkigfjH
        transactionId:
          type: string
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          description: An optional ID representing the transaction from the financial institution to associate this document with
          maxLength: 75
          example: EsmtpT9xa2S4gXym9GHBJrLkigfjH
    PeriodUnitEnum:
      type: string
      description: |
        Available period units.  Can be `day`, `week`, `month` or `year`.
        As a parameter, this should be used together with the `duration` parameter. Document must have the `documentDate` set or it should be supplied as another edit parameter within the same request.
      enum:
        - day
        - week
        - month
        - year
      example: 'day'
    ExpenseTypeEnum:
      type: string
      description: Expense type associated with the document. Can be either `business` or `personal`.
      enum:
        - business
        - personal
    DocumentUserMetadataPeriodDto:
      type: object
      description: The details about the document's warranty or return period. These fields can only be edited if the document date is known.
      properties:
        unit:
          $ref: '#/components/schemas/PeriodUnitEnum'
        duration:
          type: integer
          description: Number of period units which defines the total period duration. This parameter should be used together with the 'unit' parameter. Document must have the ''documentDate'' set or it should be supplied as another edit parameter within the same request.
          example: 14
    EditDocumentUserMetadataPeriodDto:
      type: object
      description: |
            The details about the document's warranty or return period. This can only be edited if the document date is populated. 
            If either unit or duration is unset, the full applicable warrantyPeriod or returnPeriod structure is unset.
      properties:
        unit:
          type: string
          description: To unset the value pass an empty string. Otherwise must be a valid PeriodUnitEnum value. Document must have the ''documentDate'' set or it should be supplied as another edit parameter within the same request.
          example: 'year'
        duration:
          type: integer
          nullable: true
          description: To unset pass null. Positive number of period units which defines the total period duration. This parameter should be used together with the 'unit' parameter. Document must have the ''documentDate'' set or it should be supplied as another edit parameter within the same request.
          example: 1
    DocumentUserMetadataDto:
      type: object
      properties:
        expenseType:
          $ref: '#/components/schemas/ExpenseTypeEnum'
        folders:
          description: The folders this document belongs to
          type: array
          items:
            type: string
        notes:
          type: string
          description: General text note to the document.
        warrantyPeriod:
          $ref: '#/components/schemas/DocumentUserMetadataPeriodDto'
        returnPeriod:
          $ref: '#/components/schemas/DocumentUserMetadataPeriodDto'
    EditDocumentUserMetadataDto:
      type: object
      properties:
        expenseType:
          type: string
          description: To unset the value pass an empty string. Otherwise must be a valid ExpenseTypeEnum value.
        notes:
          type: string
          description: To unset the value pass an empty string. 
        warrantyPeriod:
          $ref: '#/components/schemas/EditDocumentUserMetadataPeriodDto'
        returnPeriod:
          $ref: '#/components/schemas/EditDocumentUserMetadataPeriodDto'
    NullableDocumentAccountMetadataDto:
      type: object
      properties:
        account:
          type: string
          pattern: ^[a-zA-Z0-9-_:.]{0,75}$
          description: |
            An optional identifier representing the bank account from the financial institution to associate this document with.
            Should be set to an empty zero-length string to unset the `account` previosuly set for the document.
          maxLength: 75
          example: EsmtpT9xa2S4gXym9GHBJrLkigfjH
        transactionId:
          type: string
          pattern: ^[a-zA-Z0-9-_:.]{0,75}$
          description: |
            An optional ID representing the transaction from the financial institution to associate this document with
            Should be set to an empty zero-length string to unset the `transactionId` previosuly set for the document.
          maxLength: 75
          example: EsmtpT9xa2S4gXym9GHBJrLkigfjH
    DocumentSourceDto:
      type: object
      required:
        - url
        - format
        - imagePreview
      properties:
        format:
          $ref: '#/components/schemas/DocumentSourceFormatsEnum'
        url:
          type: string
          description: 'The url to get or view the original document file (i.e.: image, pdf, pdf_email, etc)'
        imagePreview:
          type: string
          description: |
            The url of an image file to preview this document. In case of image documents, this content will be the same of the url field.
    GetDocumentResponseDto:
      description: Structure of the response on the document details endpoint
      type: object
      required:
        - document
      properties:
        document:
          $ref: '#/components/schemas/DocumentDto'
        error:
          $ref: '#/components/schemas/GetDocumentErrorDto'
    DocumentsStatusResponseDto:
      type: object
      description: Response schema for the documents/status endpoint
      required:
        - documents
      properties:
        documents:
          description: A list of document objects with their processing status indicated
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/DocumentStatusListItemDto'
        errors:
          description: Optional property used to indicate and describe errors encountered while handling the request
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/DocumentStatusErrorItemDto'

    DocumentsDeleteErrorItemDto:
      description: Represents an error that can occur while deleting one or more documents
      type: object
      required:
        - id
        - message
      properties:
        id:
          type: string
          maxLength: 75
          minLength: 5
          example: z6uuM0iqnvf8sCDBRYLJ
          description: This is a unique identifier intended to identify the document in the Sensibill system.
          x-faker: random.uuid
        message:
          type: string
          maxLength: 100
          example: z6uuM0iqnvf8sCDBRYLJ is not a valid document id
          x-faker: random.words
          
          
    DocumentStatusErrorItemDto:
      description: Represents an error that can occur while polling for document processing status
      type: object
      required:
        - id
        - message
      properties:
        id:
          type: string
          maxLength: 35
          minLength: 20
          example: z6uuM0iqnvf8sCDBRYLJ
          description: This is a unique identifier intended to identify the document in the Sensibill system.
          x-faker: random.uuid
        message:
          type: string
          maxLength: 100
          example: z6uuM0iqnvf8sCDBRYLJ is not a valid document id
          x-faker: random.words

    DocumentStatusListItemDto:
      description: Schema for an entry in the documents/status endpoint response
      type: object
      required:
        - id
        - status
        - documentType
        - arrivalDateTime
      properties:
        id:
          $ref: '#/components/schemas/GenericIdString'
        foreignId:
          description: A unique identifier that was passed on upload to ensure that retries can happen without overriding data.
          type: string
          maxLength: 75
          minLength: 5
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          example: z6uuM0iqnvf8sCDBRYLJ
        arrivalDateTime:
          description: The date and time that the document was submitted to our system. With no explicit timezone information.
          type: string
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        lastUpdateDateTime:
          type: string
          description: The date and time that the document was last updated in our system. This will typically be when a user has last changed data on the document. With no explicit timezone information.
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        status:
          $ref: '#/components/schemas/DocumentStatusTypeEnum'
    GetDocumentListResponseDto:
      description: Structure of the response on the document list endpoint
      type: object
      required:
        - documents
        - count
      properties:
        documents:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/DocumentListItemDto'
        count:
          description: 'This field counts the total number of documents for the user existing in the system.<br> If filter conditions are informed, this would only count the records matching those.'
          type: integer
          minimum: 0
          maximum: 100
          example: 1
    DocumentListItemDto:
      type: object
      required:
        - id
        - status
        - content
        - documentType
        - arrivalDateTime
        - lastUpdateDateTime
      properties:
        id:
          type: string
          description: This is a unique identifier which is used to identify the document in the Sensibill system.
          example: z6uuM0iqnvf8sCDBRYLJ
        foreignId:
          description: A unique identifier that was passed on upload to ensure that retries can happen without overriding data.
          type: string
          example: "123456"
        accountMetadata:
          $ref: '#/components/schemas/DocumentAccountMetadataDto'
        arrivalDateTime:
          description: The date and time that the document was submitted to our system. With no explicit timezone information.
          type: string
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        lastUpdateDateTime:
          type: string
          description: The date and time that the document was last updated in our system. This will typically be when a user has last changed data on the document. With no explicit timezone information.
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        description:
          description: A user specified name / description for this document
          pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
          maxLength: 75
          type: string
          example: My document description
        status:
          $ref: '#/components/schemas/DocumentStatusTypeEnum'
        content:
          $ref: '#/components/schemas/DocumentListItemContentDto'
        source:
          $ref: '#/components/schemas/DocumentSourceDto'
        userMetadata:
          $ref: '#/components/schemas/DocumentUserMetadataDto'
    DocumentListItemContentDto:
      type: object
      required:
        - currencyCode
      properties:
        documentNumber:
          description: The document number that appears on the document. For example this can be invoice number.
          type: string
          example: 123910293-12
        currencyCode:
          $ref: '#/components/schemas/CurrencyCodeEnum'
        documentDate:
          type: string
          format: date
          description: 'The date on which this document was generated. This is only the date component of  the local time at which the purchase was made, with no explicit timezone information. see: ''documentGenerationTime''. Date is in ISO-8601 format.'
          example: '2017-09-01'
        documentTime:
          description: 'The time at which this document was generated. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
          type: string
          example: '12:31:06'
        dueDate:
          type: string
          format: date
          description: The date on which the amountDue should be paid. Date is in ISO-8601 format.
          example: '2017-09-01'
        payments:
          description: The payments made on this document. This will be an array with the different payments made towards this document.
          type: array
          items:
            $ref: '#/components/schemas/DocumentPaymentDto'
        merchant:
          $ref: '#/components/schemas/DocumentListMerchantDto'
        total:
          description: 'The total amount on the document. This will be the sum of items, fees, discounts and taxes but without any payments.'
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        amountDue:
          description: This will be the final amount left to pay on the document
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
    DocumentListMerchantDto:
      type: object
      description: The merchant infomation on this document.
      properties:
        merchantName:
          description: The name of the merchant.
          type: string
          maxLength: 500
          example: Home Sense
        categoryCode:
          description: The category the merchant belongs to.
          type: string
          pattern: ^[a-zA-Z0-9-_ ]+$
          maxLength: 25
          example: shopping
    DocumentDto:
      type: object
      required:
        - id
        - status
        - content
        - documentType
        - arrivalDateTime
        - lastUpdateDateTime
      properties:
        id:
          type: string
          description: This is a unique identifier which is used to identify the document in the Sensibill system.
          example: z6uuM0iqnvf8sCDBRYLJ
        foreignId:
          type: string
          description: A unique identifier that was passed on upload to ensure that retries can happen without overriding data.
          example: 123-receipt-clientId
        accountMetadata:
          $ref: '#/components/schemas/DocumentAccountMetadataDto'
        arrivalDateTime:
          type: string
          description: The date and time that the document was submitted to our system. With no explicit timezone information.
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        lastUpdateDateTime:
          type: string
          description: The date and time that the document was last updated in our system. This will typically be when a user has last changed data on the document. With no explicit timezone information.
          format: date-time
          example: '2017-10-26T16:01:13.836Z'
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        description:
          description: The document description. Might be also used as the document name or note.
          type: string
          pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
          maxLength: 75
          example: My document description
        status:
          $ref: '#/components/schemas/DocumentStatusTypeEnum'
        content:
          $ref: '#/components/schemas/DocumentContentDto'
        source:
          $ref: '#/components/schemas/DocumentSourceDto'
        userMetadata:
          $ref: '#/components/schemas/DocumentUserMetadataDto'
    DocumentContentDto:
      type: object
      required:
        - currencyCode
      properties:
        amountDue:
          description: This will be the final amount left to pay on the document
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        barcodes:
          type: array
          description: A list of barcodes available on the document.
          items:
            $ref: '#/components/schemas/DocumentContentBarcodeDto'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCodeEnum'
        customer:
          $ref: '#/components/schemas/DocumentContentCustomerDto'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DocumentDiscountDto'
        documentNumber:
          type: string
          description: The document number that appears on the document. For example this can be invoice number.
          example: 123910293-12
        dueDate:
          type: string
          format: date
          description: The date on which the amountDue should be paid. Date is in ISO-8601 format.
          example: '2017-09-01'
        documentDate:
          type: string
          format: date
          description: 'The date on which this document was generated. This is only the date component of  the local time at which the purchase was made, with no explicit timezone information. see: ''documentEmissionTime''. Date is in ISO-8601 format.'
          example: '2017-09-01'
        documentTime:
          description: 'The time at which this document was generated. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
          type: string
          example: '12:31:06'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/DocumentFeeDto'
        items:
          type: array
          items:
            $ref: '#/components/schemas/DocumentItemDto'
        languageCode:
          type: string
          description: The language the original document is in.
          example: english
        merchant:
          $ref: '#/components/schemas/DocumentMerchantDto'
        savings:
          description: Sum total of all savings found on the document.
          type: number
          example: 12.3
        deliveries:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryDto'
        loyaltyRewards:
          $ref: '#/components/schemas/DocumentLoyaltyRewardsDto'
        payments:
          description: The payments made on this document. This will be an array with the different payments made towards this document.
          type: array
          items:
            $ref: '#/components/schemas/DocumentPaymentDto'
        tipAmount:
          description: 'The tip (gratuity) amount on the document.'
          type: number
        total:
          description: 'The total amount on the document. This will be the sum of items, fees, discounts, taxes and tips but without any payments.'
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        totalBeforeTips:
          description: The total amount minus any tips on the document. This will be the sum of items with discounts and fees but tips and payments.
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
        totalBeforeDiscountsFeesTips:
          description: 'The total amount minus any discounts, fees and tips on the document. This will be the sum of items but without fees, discounts, tip and any payments.'
          $ref: '#/components/schemas/DocumentTaxableAmountDto'
    DocumentContentCustomerDto:
      description: Information about the customer as presented on the document.
      type: object
      properties:
        customerId:
          type: string
          description: An Id assigned to the customer by the merchant.
          example: 9357630YHE
        billingAddressLines:
          description: The billing address the customer has provided defined as an array of address lines.
          type: array
          items:
            type: string
            example: '[''1 Finite Loop Cupertino'', ''CA 95014'']'
        email:
          description: The customer email address as displayed on the document.
          type: string
          example: john@example.com
        name:
          description: The name of the customer.
          type: string
          example: john doe
        telephoneNumber:
          description: The phone number of the customer.
          type: string
          example: 905-123-1232
    DocumentContentBarcodeDto:
      description: Describes a barcode as read from a document.
      type: object
      properties:
        text:
          description: Data contained in the barcode.
          type: string
        type:
          description: 'Original type of barcode, eg: UPC, EAN, QR'
          type: string
          example: UPC
    DocumentCreationResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 5
          maxLength: 75
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          description: This is a unique identifier which is used to identify the document on Sensibill's system.
          example: NPd1RuBD7qv2cJ5yuOzM
    DocumentDeleteResponseDto:
      description: The list of document Ids which were deleted from the system
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: '#/components/schemas/GenericIdString'
          example:
            - XuncoaVG7XMTY0iWHTCa
            - BuDcoaVG74MTY0iWIYKq
        errors:
          description: Optional property used to indicate and describe errors encountered while handling the request
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/DocumentsDeleteErrorItemDto'

    GetDocumentErrorDto:
      description: Describes the error related to the request if there was a failure
      required:
        - code
        - errorDescription
      properties:
        errorDescription:
          description: An in depth description of the error for the request
          type: string
        code:
          description: A unique code to help idenifty the type of error
          type: string
    EditDocumentTaxableAmountDto:
      type: object
      properties:
        taxes:
          type: array
          nullable: true
          description: The taxes of this amount. The content passed in the PATCH call will completely replace the current content.
          items:
            $ref: '#/components/schemas/DocumentTaxDto'
        beforeTax:
          type: number
          nullable: true
          description: The total amount before taxes
          example: 12.2
        afterTax:
          type: number
          nullable: true
          description: The total amount after taxes
          example: 12.2
    EditDocumentMerchantDto:
      type: object
      description: If the merchantName is empty or null, the whole merchant data structure will be unset.
      properties:
        merchantName:
          type: string
          nullable: true
          maxLength: 500
          description: The name of the merchant. When this property is set in a PATCH request, the categoryCode might be updated automatically.
          example: Home Sense
        taxIdNumber:
          description: The tax number for this merchant.
          type: string
          maxLength: 25
          nullable: true
          example: 11111 1111 RT0001
        categoryCode:
          type: string
          nullable: true
          maxLength: 25
          description: The category this merchant belongs to. Use the endpoint /lookups/receiptcategories for a list of valid categories.
          example: shopping
    EditDocumentRequestDto:
      description: |
        Object that contains the field that will be updated in a Document. Pass the field set to `""` (an empty zero-length string) to unset its value.'
        Numeric or Enum fileds must be null to unset.
      type: object
      properties:
        description:
          type: string
          description: A user specified name or description for this document. Values should ideally satisfy the /^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$/ pattern which prohibits the `;` punctuation
          maxLength: 75
          nullable: true
          pattern: ^[a-zA-Z0-9.?!\-,\\\/:_@#'" ]{0,75}$
        accountMetadata:
          $ref: '#/components/schemas/NullableDocumentAccountMetadataDto'
        content:
          type: object
          properties:
            merchant:
              $ref: '#/components/schemas/EditDocumentMerchantDto'
            documentNumber:
              type: string
              maxLength: 75
              nullable: true
              description: The document number that appears on the document. For example this can be invoice number.
              example: 123910293-12
            dueDate:
              type: string
              nullable: true
              format: date
              description: The date on which the amountDue should be paid. Date is in ISO-8601 format.
              example: '2017-09-01'
            documentDate:
              type: string
              nullable: true
              format: date
              description: 'The date on which this document was generated. This is only the date component of  the local time at which the purchase was made, with no explicit timezone information. see: ''documentEmissionTime''. Date is in ISO-8601 format.'
              example: '2017-09-01'
            documentTime:
              type: string
              maxLength: 12
              nullable: true
              description: 'The time at which this document was generated. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
              example: '12:31:06'
            amountDue:
              $ref: '#/components/schemas/EditDocumentTaxableAmountDto'
            tipAmount:
              description: 'The total tips associated to this document. Pass null to unset.'
              type: number
              nullable: true
              example: 12.5
            totalBeforeDiscountsFeesTips:
              $ref: '#/components/schemas/EditDocumentTaxableAmountDto'
            total:
              $ref: '#/components/schemas/EditDocumentTaxableAmountDto'
            currencyCode:
              $ref: '#/components/schemas/CurrencyCodeEnum'
        userMetadata:
          $ref: '#/components/schemas/EditDocumentUserMetadataDto'
    EditDocumentResponseDto:
      description: Object with the Id of the updated Document
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 5
          maxLength: 75
          pattern: ^[a-zA-Z0-9-_:.]{5,75}$
          description: The Id of the updated Document
          example: z6uuM0iqnvf8sCDBRYLJ
  parameters:
    FolderIdParameter:
      name: folderId
      in: path
      description: A unique ID that identifies this folder in the Sensibill system.
      required: true
      schema:
        type: string
    FolderIdsParameter:
      name: folders
      in: query
      description: 'This is a list of folder IDs that you want deleted. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request.'
      required: true
      schema:
        type: string
        example: '6OeYUlNyyeVHEmHMLmgZ,ARpUx0qRIRdK7SZzG7Uo'
    DocumentIdsParameter:
      name: documentIds
      in: query
      description: 'This is a list of document IDs that you want deleted from the folder. It should be a comma separated list and may be passed as a query parameter or in a JSON body in the request.'
      required: true
      schema:
        type: string
        example: '6OeYUlNyyeVHEmHMLmgZ,ARpUx0qRIRdK7SZzG7Uo'
    DeleteDocumentsParameter:
      name: deleteDocuments
      in: query
      description: Soft delete any documents that are in this folder. This means the document will stay in Sensibill's system but it will not be accessible by the user. This may be passed as a query parameter or in a JSON body in the request.
      required: false
      schema:
        type: boolean
        default: false
    ClientIDParameter:
      name: client_id
      in: query
      schema:
        type: string
      required: true
      description: 'This is the Client Key which you received when you created a developer account with Sensibill. It is a very long, random string encoded in base64.'
    ResponseTypeParameter:
      name: response_type
      in: query
      schema:
        type: string
      required: true
      description: 'This is the type of authorization grant being requested by the client. The only valid value here is "code", and must be sent by the client (it isn''t filled in by default).'
    RedirectURIParameter:
      name: redirect_uri
      in: query
      schema:
        type: string
      required: true
      description: 'This is the URL which the user-agent should be redirected to if the login is successful. This is mostly only required by web-application clients which would like to access a Sensibill user''s account, server-based clients which are handling authentication themselves (such as SSO) will likely ignore the redirect_uri and may even have to intercept the redirect in a user-agent. Note that while some clients may not need a redirection, all clients must provide a redirect uri in accordance with the OAuth2 standard. This is true even if you set `redirect=false` below. _You must always have a redirect_uri,  even if you don''t use redirects. Always._'
    CredentialTypeParameter:
      name: credential_type
      in: query
      schema:
        type: string
        default: sensibill
      required: false
      description: 'This represents the type of credentials that are being used to authenticate the user. The default is to authenticate a user using the email address and password that they provided to Sensibill when they registered. Some clients, referred to as SSO clients, will handle their own authentication. They can provide a credential_type to indicate what type of credentials they are using to authenticate a user. An example here might be "abc_321_bank_internal", indicating the credentials are stored internally by ABC321 Bank servers. Users may have multiple credentials stored, and thus can be identified in multiple ways by third party systems.'
    RedirectParameter:
      name: redirect
      in: query
      schema:
        type: string
        default: 'true'
      required: false
      description: Can be either "true" or "false". Tells whether or not the authorizationGrant endpoint will issue a redirect if it successfully authenticates the user. Some clients which are unable to intercept a redirect might need to use this so that they can get the authorizationCode directly within the body.
    GrantTypeParameter:
      name: grant_type
      in: query
      schema:
        type: string
      required: true
      description: 'This is the type of authentication the client is presenting for its access-token. <br/><br/>If the client is looking for a client-token, then this should be set to ''client_credentials''. <br/><br/>If the client is looking to swap an authorization grant for an access token, this should be set to ''authorization_code'' <br/><br/>If the client is looking to swap a refresh_token for a new access token, this should be set to ''refresh_token'''
    TokenRedirectURIParameter:
      name: redirect_uri
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping an authorization code for an access token, then this argument is required. If you are just obtaining a client token directly, you do not need to provide a redirect_uri. This must be the same redirect_uri that was provided to the authorizationGrant endpoint, and must also match the redirect_uri which was registered with your client when you received your client credentials.'
    CodeParameter:
      name: code
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping an authorization code for an access token, then this argument is required. If you are just obtaining a client token directly, you do not need to provide a code. This parameter is the authorization_code which you obtained when you used the `/authorizationGrant` endpoint.'
    RefreshTokenParameter:
      name: refresh_token
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping a refresh_token for an access token, then this argument is required. Otherwise, this parameter should be omitted. This parameter is the refresh_token which you obtained when you last used the `/accessToken` endpoint.'
    UserIdParameter:
      name: userID
      in: path
      description: A unique ID that identifies this user in the Sensibill system. It can be 'me' to reference the user associated with the access token.
      required: true
      schema:
        type: string
    ExcludeAlertsParameter:
      name: excludeAlerts
      in: query
      required: false
      schema:
        type: boolean
      description: 'With this flag set to true, the alerts for the user are omitted. You can retrieve the counts and objects for alerts using the /users/:userID/counts endpoint.'
    DeleteUserExportParameter:
      name: export
      in: query
      required: false
      schema:
        type: boolean
      description: 'Specifies whether or not to fire off an export prior to deleting the user''s account. Should be either ''true'' or ''false''. '
    DeleteUserExportEmailParameter:
      name: exportEmail
      in: query
      required: false
      schema:
        type: string
      description: 'If you have requested an export, you may provide the email address you want the exported information to go to. If you do not supply an exportEmail, the email address for the user will be used.'
    ScaleParameter:
      name: scale
      in: query
      required: false
      schema:
        type: string
        pattern: ^[2|3]x$
        default: 3x
      description: This provides the scale factor to use for the images returned from the endpoint. Can either be '2x' or '3x'. Defaults to '3x' for higher resolution images.
    LocaleParameter:
      name: locale
      in: query
      schema:
        type: string
        maxLength: 5
        pattern: ^[a-z]{2,2}-[A-Z]{2,2}$
      example: en-CA
      description: Allows you to specify the locale in which the response should be returned. It must be a supported value from the list of locale-codes, which can be obtained by going to `/lookups/locales`. It defaults to the user's locale.
    EmailParameter:
      name: email
      in: query
      required: true
      schema:
        type: string
        format: email
      example: test@test.com
      description: The email address for the user's account.
    ReceiptEmailParameter:
      name: email
      in: query
      required: true
      schema:
        type: string
        format: email
      example: test@test.com
      description: The email address to the user's document processing account.
    UsernameParameter:
      name: username
      in: query
      required: true
      schema:
        type: string
      example: tester
      description: The username to the user's account.
    UsernameAvailabilityCredentialTypeParameter:
      name: credentialType
      in: query
      required: false
      schema:
        type: string
      description: 'The credential type for your client''s users that you wish to check. If your client only has one credential type, this parameter may be omitted.'
    ExportIdParameter:
      name: id
      in: path
      description: A unique ID that identifies this export in the Sensibill system.
      required: true
      schema:
        $ref: '#/components/schemas/GenericIdString'
    MerchantsNameParameter:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: An optional name to perform a prefix search on.
    DocumentIdParameter:
      name: id
      in: path
      description: A unique Id that identifies this document in the Sensibill system.
      required: true
      schema:
        $ref: '#/components/schemas/GenericIdString'
  requestBodies:
    FolderCreateRequest:
      description: Add a new folder for a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderCreateRequestDto'
    FolderUpdateRequest:
      description: Add a new folder for a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderUpdateRequestDto'
    FolderDeleteRequest:
      description: Delete a folder for a user
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderDeleteRequestDto'
    FoldersDeleteRequest:
      description: Delete multiple folders for a user
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FoldersDeleteRequestDto'
    AddDocumentsToFolderRequest:
      description: Add multiple documents to a folder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddOrRemoveDocumentsFromFolderDto'
    RemoveDocumentsFromFolderRequest:
      description: Remove multiple documents from a folder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddOrRemoveDocumentsFromFolderDto'
    JwtAuthenticateRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JwtAuthenticateRequestDto'
    AccessTokenRequest:
      description: Access Token Request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessTokenRequestDto'
    UserRequest:
      description: Register a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequestDto'
    JwtUserRequest:
      description: Register a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JwtUserRequestDto'
    UserUpdateRequest:
      description: Update a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdateDto'
    ExportCreateRequest:
      description: Create a document export
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExportCreateDto'
    DocumentCreateRequest:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/DocumentCreateDto'
    DocumentDeleteRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentDeleteDto'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
